<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [int flash debug\eth_to_serial.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image int flash debug\eth_to_serial.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Thu Sep 08 15:10:55 2016
<BR><P>
<H3>Maximum Stack Usage =       1280 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
tx_task &rArr; _io_fprintf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; modf &rArr; __hardfp_modf &rArr; __aeabi_dsub
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e5]">__boot</a>
 <LI><a href="#[326]">_sched_start_internal</a>
 <LI><a href="#[345]">_sched_run_internal</a>
 <LI><a href="#[310]">_sched_check_scheduler_internal</a>
 <LI><a href="#[31f]">_sched_execute_scheduler_internal</a>
 <LI><a href="#[109]">_mqx_api_call</a>
 <LI><a href="#[1fc]">_task_block</a>
 <LI><a href="#[11]">_svc_handler</a>
 <LI><a href="#[12]">_pend_svc</a>
 <LI><a href="#[10]">_int_kernel_isr</a>
 <LI><a href="#[3bb]">_psp_exception_return</a>
 <LI><a href="#[3bc]">_psp_save_fp_context_internal</a>
 <LI><a href="#[3bd]">_mem_test_and_set</a>
 <LI><a href="#[3be]">__get_PSP</a>
 <LI><a href="#[3bf]">__get_MSP</a>
 <LI><a href="#[339]">__set_MSP</a>
 <LI><a href="#[3c0]">__get_PSR</a>
 <LI><a href="#[3c1]">__enable_interrupt</a>
 <LI><a href="#[3c2]">__disable_interrupt</a>
 <LI><a href="#[3c3]">__get_LR</a>
 <LI><a href="#[3c4]">__get_PC</a>
 <LI><a href="#[3c5]">__get_CONTROL</a>
 <LI><a href="#[13]">_int_kernel_isr_epilog</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[19f]">IP_route_multi</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19b]">IP_send_dgram</a><BR>
 <LI><a href="#[19a]">IP_route</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19b]">IP_send_dgram</a><BR>
 <LI><a href="#[230]">TCP_Process_release</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[230]">TCP_Process_release</a><BR>
 <LI><a href="#[24d]">TCP_Timer_advance</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[229]">TCP_Timer_start</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ARP_age</a> from arp.o(i.ARP_age) referenced from arp.o(i.ARP_insert)
 <LI><a href="#[16]">ARP_expire</a> from arp.o(i.ARP_expire) referenced from arp.o(i.ARP_insert)
 <LI><a href="#[14]">ARP_send</a> from arp.o(i.ARP_send) referenced from arp.o(i.ARP_insert)
 <LI><a href="#[23]">ARP_service</a> from arp.o(i.ARP_service) referenced from ip-e.o(i.IPE_recv_ARP)
 <LI><a href="#[17]">DHCPCLNT_release_internal</a> from dhcpclnt.o(i.DHCPCLNT_release_internal) referenced from ifdhcp.o(i.DHCPCLNT_release)
 <LI><a href="#[19]">ICMP_service</a> from icmp.o(i.ICMP_service) referenced from icmp.o(i.ICMP_init)
 <LI><a href="#[1c]">IGMP_expire</a> from igmp.o(i.IGMP_expire) referenced from igmp.o(i.IGMP_init_timer)
 <LI><a href="#[58]">IGMP_getopt</a> from soigmp.o(i.IGMP_getopt) referenced from soigmp.o(i.SOL_IGMP_getsockopt)
 <LI><a href="#[cb]">IGMP_init</a> from igmp.o(i.IGMP_init) referenced from rtcsinit.o(.constdata)
 <LI><a href="#[1f]">IGMP_ipif_unbind</a> from soigmp.o(i.IGMP_ipif_unbind) referenced from soigmp.o(i.IGMP_join_if)
 <LI><a href="#[1d]">IGMP_ipif_unbind_nosock</a> from igmputil.o(i.IGMP_ipif_unbind_nosock) referenced from igmputil.o(i.IGMP_ipif_add)
 <LI><a href="#[1e]">IGMP_is_member_test</a> from igmputil.o(i.IGMP_is_member_test) referenced from igmputil.o(i.IGMP_is_member)
 <LI><a href="#[20]">IGMP_leave_if_all</a> from soigmp.o(i.IGMP_leave_if_all) referenced from soigmp.o(i.IGMP_join_socket)
 <LI><a href="#[1b]">IGMP_service</a> from igmp.o(i.IGMP_service) referenced from igmp.o(i.IGMP_init)
 <LI><a href="#[59]">IGMP_setopt</a> from soigmp.o(i.IGMP_setopt) referenced from soigmp.o(i.SOL_IGMP_setsockopt)
 <LI><a href="#[c6]">IPE_close</a> from ip-e.o(i.IPE_close) referenced from ip-e.o(.constdata)
 <LI><a href="#[ca]">IPE_get_link_status</a> from ip-e.o(i.IPE_get_link_status) referenced from ip-e.o(.constdata)
 <LI><a href="#[c8]">IPE_join</a> from ip-e.o(i.IPE_join) referenced from ip-e.o(.constdata)
 <LI><a href="#[c9]">IPE_leave</a> from ip-e.o(i.IPE_leave) referenced from ip-e.o(.constdata)
 <LI><a href="#[c5]">IPE_open</a> from ip-e.o(i.IPE_open) referenced from ip-e.o(.constdata)
 <LI><a href="#[22]">IPE_recv_ARP</a> from ip-e.o(i.IPE_recv_ARP) referenced from ip-e.o(i.IPE_open)
 <LI><a href="#[21]">IPE_recv_IP</a> from ip-e.o(i.IPE_recv_IP) referenced from ip-e.o(i.IPE_open)
 <LI><a href="#[c7]">IPE_send_IP</a> from ip-e.o(i.IPE_send_IP) referenced from ip-e.o(.constdata)
 <LI><a href="#[25]">IPIF_add</a> from ip_if.o(i.IPIF_add) referenced from iplocal.o(i.IPLOCAL_init)
 <LI><a href="#[25]">IPIF_add</a> from ip_if.o(i.IPIF_add) referenced from rtcs_if.o(i.RTCS_if_add)
 <LI><a href="#[46]">IPIF_bind</a> from ip_if.o(i.IPIF_bind) referenced from rtcs_if.o(i.RTCS_if_probe_and_bind)
 <LI><a href="#[47]">IPIF_bind_finish</a> from ip_if.o(i.IPIF_bind_finish) referenced from rtcs_if.o(i.RTCS_if_probe_and_bind)
 <LI><a href="#[43]">IPIF_gate_add</a> from ip_if.o(i.IPIF_gate_add) referenced from rtcs_if.o(i.RTCS_gate_add)
 <LI><a href="#[1a]">IPIF_gate_add_redirect</a> from ip_if.o(i.IPIF_gate_add_redirect) referenced from icmp.o(i.ICMP_service)
 <LI><a href="#[44]">IPIF_gate_remove</a> from ip_if.o(i.IPIF_gate_remove) referenced from rtcs_if.o(i.RTCS_gate_remove)
 <LI><a href="#[48]">IPIF_remove</a> from ip_if.o(i.IPIF_remove) referenced from rtcs_if.o(i.RTCS_if_remove)
 <LI><a href="#[18]">IPIF_unbind</a> from ip_if.o(i.IPIF_unbind) referenced from dhcpclnt.o(i.DHCPCLNT_release_internal)
 <LI><a href="#[18]">IPIF_unbind</a> from ip_if.o(i.IPIF_unbind) referenced from rtcs_if.o(i.RTCS_if_unbind)
 <LI><a href="#[cf]">IPLOCAL_close</a> from iplocal.o(i.IPLOCAL_close) referenced from iplocal.o(.constdata)
 <LI><a href="#[ce]">IPLOCAL_open</a> from iplocal.o(i.IPLOCAL_open) referenced from iplocal.o(.constdata)
 <LI><a href="#[d0]">IPLOCAL_send</a> from iplocal.o(i.IPLOCAL_send) referenced from iplocal.o(.constdata)
 <LI><a href="#[26]">IPLOCAL_service</a> from iplocal.o(i.IPLOCAL_service) referenced from iplocal.o(i.IPLOCAL_send)
 <LI><a href="#[27]">IP_MTU_test</a> from iputil.o(i.IP_MTU_test) referenced from iputil.o(i.IP_MTU)
 <LI><a href="#[29]">IP_complete_recv</a> from ip.o(i.IP_complete_recv) referenced from ip.o(i.IP_complete_send)
 <LI><a href="#[29]">IP_complete_recv</a> from ip.o(i.IP_complete_recv) referenced from ip.o(i.IP_service)
 <LI><a href="#[39]">IP_complete_send</a> from ip.o(i.IP_complete_send) referenced from ip.o(i.IP_send)
 <LI><a href="#[39]">IP_complete_send</a> from ip.o(i.IP_complete_send) referenced from ip.o(i.IP_send_IF)
 <LI><a href="#[2a]">IP_find_if_test</a> from iputil.o(i.IP_find_if_test) referenced from iputil.o(i.IP_find_if)
 <LI><a href="#[2b]">IP_get_ipif_addr_test</a> from iputil.o(i.IP_get_ipif_addr_test) referenced from iputil.o(i.IP_get_ipif_addr)
 <LI><a href="#[2c]">IP_get_netmask_test</a> from iputil.o(i.IP_get_netmask_test) referenced from iputil.o(i.IP_get_netmask)
 <LI><a href="#[2d]">IP_is_gate_test</a> from iputil.o(i.IP_is_gate_test) referenced from iputil.o(i.IP_is_gate)
 <LI><a href="#[2e]">IP_is_local_test</a> from iputil.o(i.IP_is_local_test) referenced from iputil.o(i.IP_is_local)
 <LI><a href="#[31]">IP_route_add_indirect_sort</a> from iproute.o(i.IP_route_add_indirect_sort) referenced from iproute.o(i.IP_route_add_indirect)
 <LI><a href="#[36]">IP_route_delete</a> from iproute.o(i.IP_route_delete) referenced from iproute.o(i.IP_route_remove_direct)
 <LI><a href="#[36]">IP_route_delete</a> from iproute.o(i.IP_route_delete) referenced from iproute.o(i.IP_route_remove_indirect)
 <LI><a href="#[35]">IP_route_delete_direct_test</a> from iproute.o(i.IP_route_delete_direct_test) referenced from iproute.o(i.IP_route_remove_direct)
 <LI><a href="#[38]">IP_route_delete_indirect_all</a> from iproute.o(i.IP_route_delete_indirect_all) referenced from iproute.o(i.IP_route_remove_indirect)
 <LI><a href="#[37]">IP_route_delete_indirect_test</a> from iproute.o(i.IP_route_delete_indirect_test) referenced from iproute.o(i.IP_route_remove_indirect)
 <LI><a href="#[32]">IP_route_find_test</a> from iputil.o(i.IP_route_find_test) referenced from iputil.o(i.IP_route_find)
 <LI><a href="#[30]">IP_route_insert</a> from iproute.o(i.IP_route_insert) referenced from iproute.o(i.IP_route_add_direct)
 <LI><a href="#[30]">IP_route_insert</a> from iproute.o(i.IP_route_insert) referenced from iproute.o(i.IP_route_add_indirect)
 <LI><a href="#[33]">IP_route_local_test</a> from iproute.o(i.IP_route_local_test) referenced from iproute.o(i.IP_route_local)
 <LI><a href="#[34]">IP_route_multi_test</a> from iproute.o(i.IP_route_multi_test) referenced from iproute.o(i.IP_route_multi)
 <LI><a href="#[2f]">IP_route_test</a> from iproute.o(i.IP_route_test) referenced from iproute.o(i.IP_route)
 <LI><a href="#[24]">IP_service</a> from ip.o(i.IP_service) referenced from ip-e.o(i.IPE_recv_IP)
 <LI><a href="#[3b]">MACNET_RX_ISR</a> from macnet_receive.o(i.MACNET_RX_ISR) referenced from macnet_util.o(i.MACNET_install_isrs)
 <LI><a href="#[3a]">MACNET_TX_ISR</a> from macnet_send.o(i.MACNET_TX_ISR) referenced from macnet_util.o(i.MACNET_install_isrs)
 <LI><a href="#[d5]">MACNET_initialize</a> from macnet_init.o(i.MACNET_initialize) referenced from macnet_init.o(.constdata)
 <LI><a href="#[da]">MACNET_join</a> from macnet_join.o(i.MACNET_join) referenced from macnet_init.o(.constdata)
 <LI><a href="#[d8]">MACNET_read_mii</a> from macnet_mii.o(i.MACNET_read_mii) referenced from macnet_init.o(.constdata)
 <LI><a href="#[db]">MACNET_rejoin</a> from macnet_rejoin.o(i.MACNET_rejoin) referenced from macnet_init.o(.constdata)
 <LI><a href="#[3c]">MACNET_rx_free</a> from macnet_receive.o(i.MACNET_rx_free) referenced from macnet_receive.o(i.MACNET_process_rx_bds)
 <LI><a href="#[3d]">MACNET_rx_free_large</a> from macnet_receive.o(i.MACNET_rx_free_large) referenced from macnet_receive.o(i.MACNET_process_rx_bds)
 <LI><a href="#[3e]">MACNET_rx_free_small</a> from macnet_receive.o(i.MACNET_rx_free_small) referenced from macnet_receive.o(i.MACNET_process_rx_bds)
 <LI><a href="#[d7]">MACNET_send</a> from macnet_send.o(i.MACNET_send) referenced from macnet_init.o(.constdata)
 <LI><a href="#[d6]">MACNET_shutdown</a> from macnet_stop.o(i.MACNET_shutdown) referenced from macnet_init.o(.constdata)
 <LI><a href="#[d9]">MACNET_write_mii</a> from macnet_mii.o(i.MACNET_write_mii) referenced from macnet_init.o(.constdata)
 <LI><a href="#[41]">RTCSPCB_construct</a> from rtcspcb.o(i.RTCSPCB_construct) referenced from rtcspcb.o(i.RTCSPCB_init)
 <LI><a href="#[40]">RTCSPCB_destroy</a> from rtcspcb.o(i.RTCSPCB_destroy) referenced from rtcspcb.o(i.RTCSPCB_init)
 <LI><a href="#[3f]">RTCSPCB_free_internal</a> from rtcspcb.o(i.RTCSPCB_free_internal) referenced from rtcspcb.o(i.RTCSPCB_alloc_recv)
 <LI><a href="#[3f]">RTCSPCB_free_internal</a> from rtcspcb.o(i.RTCSPCB_free_internal) referenced from rtcspcb.o(i.RTCSPCB_construct)
 <LI><a href="#[49]">RTCS_task</a> from rtcstask.o(i.RTCS_task) referenced from rtcstask.o(i.RTCS_task_create)
 <LI><a href="#[b7]">SOCK_DGRAM_bind</a> from sock_dgram.o(i.SOCK_DGRAM_bind) referenced from sock_dgram.o(.constdata)
 <LI><a href="#[b8]">SOCK_DGRAM_connect</a> from sock_dgram.o(i.SOCK_DGRAM_connect) referenced from sock_dgram.o(.constdata)
 <LI><a href="#[ba]">SOCK_DGRAM_getpeername</a> from sock_dgram.o(i.SOCK_DGRAM_getpeername) referenced from sock_dgram.o(.constdata)
 <LI><a href="#[b9]">SOCK_DGRAM_getsockname</a> from sock_dgram.o(i.SOCK_DGRAM_getsockname) referenced from sock_dgram.o(.constdata)
 <LI><a href="#[bb]">SOCK_DGRAM_recv</a> from sock_dgram.o(i.SOCK_DGRAM_recv) referenced from sock_dgram.o(.constdata)
 <LI><a href="#[bc]">SOCK_DGRAM_recvfrom</a> from sock_dgram.o(i.SOCK_DGRAM_recvfrom) referenced from sock_dgram.o(.constdata)
 <LI><a href="#[bd]">SOCK_DGRAM_send</a> from sock_dgram.o(i.SOCK_DGRAM_send) referenced from sock_dgram.o(.constdata)
 <LI><a href="#[be]">SOCK_DGRAM_sendto</a> from sock_dgram.o(i.SOCK_DGRAM_sendto) referenced from sock_dgram.o(.constdata)
 <LI><a href="#[b6]">SOCK_DGRAM_socket</a> from sock_dgram.o(i.SOCK_DGRAM_socket) referenced from sock_dgram.o(.constdata)
 <LI><a href="#[b1]">SOCK_STREAM_accept</a> from sock_stream.o(i.SOCK_STREAM_accept) referenced from sock_stream.o(.constdata)
 <LI><a href="#[ae]">SOCK_STREAM_bind</a> from sock_stream.o(i.SOCK_STREAM_bind) referenced from sock_stream.o(.constdata)
 <LI><a href="#[af]">SOCK_STREAM_connect</a> from sock_stream.o(i.SOCK_STREAM_connect) referenced from sock_stream.o(.constdata)
 <LI><a href="#[b3]">SOCK_STREAM_getpeername</a> from sock_stream.o(i.SOCK_STREAM_getpeername) referenced from sock_stream.o(.constdata)
 <LI><a href="#[b2]">SOCK_STREAM_getsockname</a> from sock_stream.o(i.SOCK_STREAM_getsockname) referenced from sock_stream.o(.constdata)
 <LI><a href="#[b0]">SOCK_STREAM_listen</a> from sock_stream.o(i.SOCK_STREAM_listen) referenced from sock_stream.o(.constdata)
 <LI><a href="#[b4]">SOCK_STREAM_recv</a> from sock_stream.o(i.SOCK_STREAM_recv) referenced from sock_stream.o(.constdata)
 <LI><a href="#[b5]">SOCK_STREAM_send</a> from sock_stream.o(i.SOCK_STREAM_send) referenced from sock_stream.o(.constdata)
 <LI><a href="#[ad]">SOCK_STREAM_socket</a> from sock_stream.o(i.SOCK_STREAM_socket) referenced from sock_stream.o(.constdata)
 <LI><a href="#[a7]">SOCK_poll_fds</a> from sock_select.o(i.SOCK_poll_fds) referenced from sock_select.o(i.select)
 <LI><a href="#[57]">SOCK_select_expire</a> from sock_select.o(i.SOCK_select_expire) referenced from sock_select.o(i.SOCK_select_block)
 <LI><a href="#[bf]">SOL_IGMP_getsockopt</a> from soigmp.o(i.SOL_IGMP_getsockopt) referenced from soigmp.o(.constdata)
 <LI><a href="#[c0]">SOL_IGMP_setsockopt</a> from soigmp.o(i.SOL_IGMP_setsockopt) referenced from soigmp.o(.constdata)
 <LI><a href="#[c1]">SOL_IP_getsockopt</a> from soip.o(i.SOL_IP_getsockopt) referenced from soip.o(.constdata)
 <LI><a href="#[c2]">SOL_IP_setsockopt</a> from soip.o(i.SOL_IP_setsockopt) referenced from soip.o(.constdata)
 <LI><a href="#[c3]">SOL_LINK_getsockopt</a> from solink.o(i.SOL_LINK_getsockopt) referenced from solink.o(.constdata)
 <LI><a href="#[c4]">SOL_LINK_setsockopt</a> from solink.o(i.SOL_LINK_setsockopt) referenced from solink.o(.constdata)
 <LI><a href="#[5a]">TCPIP_fake_tick</a> from tcpip.o(i.TCPIP_fake_tick) referenced from tcpip.o(i.TCPIP_task)
 <LI><a href="#[42]">TCPIP_task</a> from tcpip.o(i.TCPIP_task) referenced from rtcscmd.o(i.RTCS_create)
 <LI><a href="#[cd]">TCP_Init</a> from tcp.o(i.TCP_Init) referenced from rtcsinit.o(.constdata)
 <LI><a href="#[a2]">TCP_Process_abort</a> from tcp_clos.o(i.TCP_Process_abort) referenced from sock_close.o(i.closesocket)
 <LI><a href="#[50]">TCP_Process_accept</a> from tcp.o(i.TCP_Process_accept) referenced from sock_stream.o(i.SOCK_STREAM_accept)
 <LI><a href="#[51]">TCP_Process_bind</a> from tcp.o(i.TCP_Process_bind) referenced from sock_stream.o(i.SOCK_STREAM_bind)
 <LI><a href="#[a3]">TCP_Process_close</a> from tcp_clos.o(i.TCP_Process_close) referenced from sock_close.o(i.closesocket)
 <LI><a href="#[56]">TCP_Process_create</a> from tcp.o(i.TCP_Process_create) referenced from sock_stream.o(i.SOCK_STREAM_socket)
 <LI><a href="#[52]">TCP_Process_open</a> from tcp.o(i.TCP_Process_open) referenced from sock_stream.o(i.SOCK_STREAM_connect)
 <LI><a href="#[52]">TCP_Process_open</a> from tcp.o(i.TCP_Process_open) referenced from sock_stream.o(i.SOCK_STREAM_listen)
 <LI><a href="#[54]">TCP_Process_receive</a> from tcp_rcv.o(i.TCP_Process_receive) referenced from sock_stream.o(i.SOCK_STREAM_recv)
 <LI><a href="#[55]">TCP_Process_send</a> from tcp_send.o(i.TCP_Process_send) referenced from sock_stream.o(i.SOCK_STREAM_send)
 <LI><a href="#[a9]">TCP_Send_keepalive</a> from tcp_send.o(i.TCP_Send_keepalive) referenced from tcp.o(i.tcp_start_keepalive_timer)
 <LI><a href="#[5c]">TCP_Service_packet</a> from tcp.o(i.TCP_Service_packet) referenced from tcp.o(i.TCP_Init)
 <LI><a href="#[5b]">TCP_Tick_server</a> from ticker.o(i.TCP_Tick_server) referenced from tcp.o(i.TCP_Init)
 <LI><a href="#[4b]">UDP_bind</a> from udp.o(i.UDP_bind) referenced from sock_dgram.o(i.SOCK_DGRAM_bind)
 <LI><a href="#[5f]">UDP_close</a> from udp.o(i.UDP_close) referenced from udp.o(i.UDP_close_internal)
 <LI><a href="#[5f]">UDP_close</a> from udp.o(i.UDP_close) referenced from sock_close.o(i.closesocket)
 <LI><a href="#[4c]">UDP_connect</a> from udp.o(i.UDP_connect) referenced from sock_dgram.o(i.SOCK_DGRAM_connect)
 <LI><a href="#[cc]">UDP_init</a> from udp.o(i.UDP_init) referenced from rtcsinit.o(.constdata)
 <LI><a href="#[4f]">UDP_open</a> from udp.o(i.UDP_open) referenced from sock_dgram.o(i.SOCK_DGRAM_socket)
 <LI><a href="#[4a]">UDP_process</a> from udp.o(i.UDP_process) referenced from sock_dgram.o(i.SOCK_DGRAM_bind)
 <LI><a href="#[4d]">UDP_receive</a> from udp.o(i.UDP_receive) referenced from sock_dgram.o(i.SOCK_DGRAM_recvfrom)
 <LI><a href="#[61]">UDP_receive_expire</a> from udp.o(i.UDP_receive_expire) referenced from udp.o(i.UDP_receive)
 <LI><a href="#[4e]">UDP_send</a> from udp.o(i.UDP_send) referenced from sock_dgram.o(i.SOCK_DGRAM_sendto)
 <LI><a href="#[60]">UDP_service</a> from udp.o(i.UDP_service) referenced from udp.o(i.UDP_init)
 <LI><a href="#[e5]">__boot</a> from boot.o(. text) referenced from vectors.o(.vectors_rom)
 <LI><a href="#[71]">_adc_close</a> from adc.o(i._adc_close) referenced from adc.o(i._io_adc_install)
 <LI><a href="#[6e]">_adc_ioctl</a> from adc.o(i._adc_ioctl) referenced from adc.o(i._io_adc_install)
 <LI><a href="#[72]">_adc_open</a> from adc.o(i._adc_open) referenced from adc.o(i._io_adc_install)
 <LI><a href="#[70]">_adc_read</a> from adc.o(i._adc_read) referenced from adc.o(i._io_adc_install)
 <LI><a href="#[6f]">_adc_write</a> from adc.o(i._adc_write) referenced from adc.o(i._io_adc_install)
 <LI><a href="#[65]">_bsp_get_hwticks</a> from init_bsp.o(i._bsp_get_hwticks) referenced from init_bsp.o(i._bsp_pre_init)
 <LI><a href="#[64]">_bsp_systimer_callback</a> from init_bsp.o(i._bsp_systimer_callback) referenced from init_bsp.o(i._bsp_pre_init)
 <LI><a href="#[6b]">_esdhc_close</a> from esdhc.o(i._esdhc_close) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[68]">_esdhc_ioctl</a> from esdhc.o(i._esdhc_ioctl) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[66]">_esdhc_isr</a> from esdhc.o(i._esdhc_isr) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[6c]">_esdhc_open</a> from esdhc.o(i._esdhc_open) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[6a]">_esdhc_read</a> from esdhc.o(i._esdhc_read) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[67]">_esdhc_uninstall</a> from esdhc.o(i._esdhc_uninstall) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[69]">_esdhc_write</a> from esdhc.o(i._esdhc_write) referenced from esdhc.o(i._esdhc_install)
 <LI><a href="#[6d]">_int_default_isr</a> from int.o(i._int_default_isr) referenced from int.o(i._int_get_isr)
 <LI><a href="#[6d]">_int_default_isr</a> from int.o(i._int_default_isr) referenced from int.o(i._int_init)
 <LI><a href="#[6d]">_int_default_isr</a> from int.o(i._int_default_isr) referenced from int.o(i._int_install_isr)
 <LI><a href="#[10]">_int_kernel_isr</a> from dispatch.o(KERNEL) referenced 247 times from vectors.o(.vectors_rom)
 <LI><a href="#[10]">_int_kernel_isr</a> from dispatch.o(KERNEL) referenced from int.o(i._int_init)
 <LI><a href="#[13]">_int_kernel_isr_epilog</a> from dispatch.o(KERNEL) referenced from dispatch.o(KERNEL)
 <LI><a href="#[73]">_io_fputc</a> from io_fputc.o(i._io_fputc) referenced from io_fprt.o(i._io_fprintf)
 <LI><a href="#[78]">_io_i2c_int_close</a> from i2c_int.o(i._io_i2c_int_close) referenced from i2c_int.o(i._io_i2c_int_install)
 <LI><a href="#[75]">_io_i2c_int_ioctl</a> from i2c_int.o(i._io_i2c_int_ioctl) referenced from i2c_int.o(i._io_i2c_int_install)
 <LI><a href="#[79]">_io_i2c_int_open</a> from i2c_int.o(i._io_i2c_int_open) referenced from i2c_int.o(i._io_i2c_int_install)
 <LI><a href="#[77]">_io_i2c_int_read</a> from i2c_int.o(i._io_i2c_int_read) referenced from i2c_int.o(i._io_i2c_int_install)
 <LI><a href="#[74]">_io_i2c_int_uninstall</a> from i2c_int.o(i._io_i2c_int_uninstall) referenced from i2c_int.o(i._io_i2c_int_install)
 <LI><a href="#[76]">_io_i2c_int_write</a> from i2c_int.o(i._io_i2c_int_write) referenced from i2c_int.o(i._io_i2c_int_install)
 <LI><a href="#[7e]">_io_i2c_polled_close</a> from i2c_pol.o(i._io_i2c_polled_close) referenced from i2c_pol.o(i._io_i2c_polled_install)
 <LI><a href="#[7b]">_io_i2c_polled_ioctl</a> from i2c_pol.o(i._io_i2c_polled_ioctl) referenced from i2c_pol.o(i._io_i2c_polled_install)
 <LI><a href="#[7f]">_io_i2c_polled_open</a> from i2c_pol.o(i._io_i2c_polled_open) referenced from i2c_pol.o(i._io_i2c_polled_install)
 <LI><a href="#[7d]">_io_i2c_polled_read</a> from i2c_pol.o(i._io_i2c_polled_read) referenced from i2c_pol.o(i._io_i2c_polled_install)
 <LI><a href="#[7a]">_io_i2c_polled_uninstall</a> from i2c_pol.o(i._io_i2c_polled_uninstall) referenced from i2c_pol.o(i._io_i2c_polled_install)
 <LI><a href="#[7c]">_io_i2c_polled_write</a> from i2c_pol.o(i._io_i2c_polled_write) referenced from i2c_pol.o(i._io_i2c_polled_install)
 <LI><a href="#[82]">_io_sai_dma_close</a> from sai_dma.o(i._io_sai_dma_close) referenced from sai_dma.o(i._io_sai_dma_install)
 <LI><a href="#[81]">_io_sai_dma_ioctl</a> from sai_dma.o(i._io_sai_dma_ioctl) referenced from sai_dma.o(i._io_sai_dma_install)
 <LI><a href="#[83]">_io_sai_dma_open</a> from sai_dma.o(i._io_sai_dma_open) referenced from sai_dma.o(i._io_sai_dma_install)
 <LI><a href="#[80]">_io_sai_dma_uninstall</a> from sai_dma.o(i._io_sai_dma_uninstall) referenced from sai_dma.o(i._io_sai_dma_install)
 <LI><a href="#[87]">_io_serial_polled_close</a> from serl_pol.o(i._io_serial_polled_close) referenced from serl_pol.o(i._io_serial_polled_install)
 <LI><a href="#[84]">_io_serial_polled_ioctl</a> from serl_pol.o(i._io_serial_polled_ioctl) referenced from serl_pol.o(i._io_serial_polled_install)
 <LI><a href="#[88]">_io_serial_polled_open</a> from serl_pol.o(i._io_serial_polled_open) referenced from serl_pol.o(i._io_serial_polled_install)
 <LI><a href="#[86]">_io_serial_polled_read</a> from serl_pol.o(i._io_serial_polled_read) referenced from serl_pol.o(i._io_serial_polled_install)
 <LI><a href="#[85]">_io_serial_polled_write</a> from serl_pol.o(i._io_serial_polled_write) referenced from serl_pol.o(i._io_serial_polled_install)
 <LI><a href="#[8d]">_ki2c_int_deinit</a> from i2c_int_ki2c.o(i._ki2c_int_deinit) referenced from i2c_int_ki2c.o(i._ki2c_int_install)
 <LI><a href="#[8e]">_ki2c_int_init</a> from i2c_int_ki2c.o(i._ki2c_int_init) referenced from i2c_int_ki2c.o(i._ki2c_int_install)
 <LI><a href="#[8c]">_ki2c_int_rx</a> from i2c_int_ki2c.o(i._ki2c_int_rx) referenced from i2c_int_ki2c.o(i._ki2c_int_install)
 <LI><a href="#[8b]">_ki2c_int_tx</a> from i2c_int_ki2c.o(i._ki2c_int_tx) referenced from i2c_int_ki2c.o(i._ki2c_int_install)
 <LI><a href="#[89]">_ki2c_isr</a> from i2c_int_ki2c.o(i._ki2c_isr) referenced from i2c_int_ki2c.o(i._ki2c_int_init)
 <LI><a href="#[91]">_ki2c_polled_deinit</a> from i2c_pol_ki2c.o(i._ki2c_polled_deinit) referenced from i2c_pol_ki2c.o(i._ki2c_polled_install)
 <LI><a href="#[92]">_ki2c_polled_init</a> from i2c_pol_ki2c.o(i._ki2c_polled_init) referenced from i2c_pol_ki2c.o(i._ki2c_polled_install)
 <LI><a href="#[8a]">_ki2c_polled_ioctl</a> from i2c_pol_ki2c.o(i._ki2c_polled_ioctl) referenced from i2c_int_ki2c.o(i._ki2c_int_install)
 <LI><a href="#[8a]">_ki2c_polled_ioctl</a> from i2c_pol_ki2c.o(i._ki2c_polled_ioctl) referenced from i2c_pol_ki2c.o(i._ki2c_polled_install)
 <LI><a href="#[90]">_ki2c_polled_rx</a> from i2c_pol_ki2c.o(i._ki2c_polled_rx) referenced from i2c_pol_ki2c.o(i._ki2c_polled_install)
 <LI><a href="#[8f]">_ki2c_polled_tx</a> from i2c_pol_ki2c.o(i._ki2c_polled_tx) referenced from i2c_pol_ki2c.o(i._ki2c_polled_install)
 <LI><a href="#[e3]">_ksai_dma_deinit</a> from sai_dma_ksai.o(i._ksai_dma_deinit) referenced from init_sai.o(.constdata)
 <LI><a href="#[e2]">_ksai_dma_init</a> from sai_dma_ksai.o(i._ksai_dma_init) referenced from init_sai.o(.constdata)
 <LI><a href="#[e4]">_ksai_dma_ioctl</a> from sai_dma_ksai.o(i._ksai_dma_ioctl) referenced from init_sai.o(.constdata)
 <LI><a href="#[95]">_ksai_rx_dma_irq_handler</a> from sai_dma_ksai.o(i._ksai_rx_dma_irq_handler) referenced from sai_dma_ksai.o(i._ksai_dma_init)
 <LI><a href="#[96]">_ksai_rx_fifoerr_irq_handler</a> from sai_dma_ksai.o(i._ksai_rx_fifoerr_irq_handler) referenced from sai_dma_ksai.o(i._ksai_dma_init)
 <LI><a href="#[93]">_ksai_tx_dma_irq_handler</a> from sai_dma_ksai.o(i._ksai_tx_dma_irq_handler) referenced from sai_dma_ksai.o(i._ksai_dma_init)
 <LI><a href="#[94]">_ksai_tx_fifoerr_irq_handler</a> from sai_dma_ksai.o(i._ksai_tx_fifoerr_irq_handler) referenced from sai_dma_ksai.o(i._ksai_dma_init)
 <LI><a href="#[9b]">_kuart_polled_deinit</a> from serl_pol_kuart.o(i._kuart_polled_deinit) referenced from serl_pol_kuart.o(i._kuart_polled_install)
 <LI><a href="#[9a]">_kuart_polled_getc</a> from serl_pol_kuart.o(i._kuart_polled_getc) referenced from serl_pol_kuart.o(i._kuart_polled_install)
 <LI><a href="#[9c]">_kuart_polled_init</a> from serl_pol_kuart.o(i._kuart_polled_init) referenced from serl_pol_kuart.o(i._kuart_polled_install)
 <LI><a href="#[97]">_kuart_polled_ioctl</a> from serl_pol_kuart.o(i._kuart_polled_ioctl) referenced from serl_pol_kuart.o(i._kuart_polled_install)
 <LI><a href="#[99]">_kuart_polled_putc</a> from serl_pol_kuart.o(i._kuart_polled_putc) referenced from serl_pol_kuart.o(i._kuart_polled_install)
 <LI><a href="#[98]">_kuart_polled_status</a> from serl_pol_kuart.o(i._kuart_polled_status) referenced from serl_pol_kuart.o(i._kuart_polled_install)
 <LI><a href="#[28]">_lwmem_free</a> from lwmem.o(i._lwmem_free) referenced from ip.o(i.IP_complete_send)
 <LI><a href="#[9e]">_mqx_idle_task</a> from idletask.o(i._mqx_idle_task) referenced from mqx.o(i._mqx_init_kernel_data_internal)
 <LI><a href="#[9d]">_mqx_init_task</a> from inittask.o(i._mqx_init_task) referenced from mqx.o(i._mqx_init_kernel_data_internal)
 <LI><a href="#[9f]">_msg_cleanup</a> from msg.o(i._msg_cleanup) referenced from msg.o(i._msg_create_component)
 <LI><a href="#[a0]">_partition_cleanup</a> from partition.o(i._partition_cleanup) referenced from partition.o(i._partition_create_component)
 <LI><a href="#[12]">_pend_svc</a> from dispatch.o(KERNEL) referenced from vectors.o(.vectors_rom)
 <LI><a href="#[11]">_svc_handler</a> from dispatch.o(KERNEL) referenced from vectors.o(.vectors_rom)
 <LI><a href="#[a1]">_task_exit_function_internal</a> from task.o(i._task_exit_function_internal) referenced from stack_bu.o(i._psp_build_stack_frame)
 <LI><a href="#[62]">adc_complete_isr</a> from adc_kadc.o(i.adc_complete_isr) referenced from adc_kadc.o(i._adc_hw_init)
 <LI><a href="#[63]">adt_idelay_isr</a> from adt_kpdb.o(i.adt_idelay_isr) referenced from adt_kpdb.o(i._adt_hw_init)
 <LI><a href="#[6]">edma_channel_claim</a> from edma.o(i.edma_channel_claim) referenced 2 times from edma.o(.data)
 <LI><a href="#[7]">edma_channel_release</a> from edma.o(i.edma_channel_release) referenced 2 times from edma.o(.data)
 <LI><a href="#[8]">edma_channel_reset</a> from edma.o(i.edma_channel_reset) referenced 2 times from edma.o(.data)
 <LI><a href="#[9]">edma_channel_setup</a> from edma.o(i.edma_channel_setup) referenced 2 times from edma.o(.data)
 <LI><a href="#[a]">edma_channel_status</a> from edma.o(i.edma_channel_status) referenced 2 times from edma.o(.data)
 <LI><a href="#[5]">edma_deinit</a> from edma.o(i.edma_deinit) referenced 2 times from edma.o(.data)
 <LI><a href="#[a4]">edma_done_isr</a> from edma.o(i.edma_done_isr) referenced from edma.o(i.edma_install_isrs)
 <LI><a href="#[a5]">edma_err_isr</a> from edma.o(i.edma_err_isr) referenced from edma.o(i.edma_install_isrs)
 <LI><a href="#[4]">edma_init</a> from edma.o(i.edma_init) referenced 2 times from edma.o(.data)
 <LI><a href="#[e]">edma_request_disable</a> from edma.o(i.edma_request_disable) referenced 2 times from edma.o(.data)
 <LI><a href="#[d]">edma_request_enable</a> from edma.o(i.edma_request_enable) referenced 2 times from edma.o(.data)
 <LI><a href="#[c]">edma_request_source</a> from edma.o(i.edma_request_source) referenced 2 times from edma.o(.data)
 <LI><a href="#[b]">edma_transfer_submit</a> from edma.o(i.edma_transfer_submit) referenced 2 times from edma.o(.data)
 <LI><a href="#[dd]">hwtimer_systick_deinit</a> from hwtimer_systick.o(i.hwtimer_systick_deinit) referenced from hwtimer_systick.o(.constdata)
 <LI><a href="#[e1]">hwtimer_systick_get_time</a> from hwtimer_systick.o(i.hwtimer_systick_get_time) referenced from hwtimer_systick.o(.constdata)
 <LI><a href="#[dc]">hwtimer_systick_init</a> from hwtimer_systick.o(i.hwtimer_systick_init) referenced from hwtimer_systick.o(.constdata)
 <LI><a href="#[a6]">hwtimer_systick_isr</a> from hwtimer_systick.o(i.hwtimer_systick_isr) referenced from hwtimer_systick.o(i.hwtimer_systick_init)
 <LI><a href="#[de]">hwtimer_systick_set_div</a> from hwtimer_systick.o(i.hwtimer_systick_set_div) referenced from hwtimer_systick.o(.constdata)
 <LI><a href="#[df]">hwtimer_systick_start</a> from hwtimer_systick.o(i.hwtimer_systick_start) referenced from hwtimer_systick.o(.constdata)
 <LI><a href="#[e0]">hwtimer_systick_stop</a> from hwtimer_systick.o(i.hwtimer_systick_stop) referenced from hwtimer_systick.o(.constdata)
 <LI><a href="#[45]">ip_if_del_dns_addr</a> from ip_if.o(i.ip_if_del_dns_addr) referenced from rtcs_if.o(i.RTCS_if_del_dns_addr)
 <LI><a href="#[aa]">main_task</a> from demo.o(i.main_task) referenced from demo.o(.constdata)
 <LI><a href="#[d1]">phy_ksz8081_discover_addr</a> from phy_ksz8081.o(i.phy_ksz8081_discover_addr) referenced from phy_ksz8081.o(.constdata)
 <LI><a href="#[d4]">phy_ksz8081_get_link_status</a> from phy_ksz8081.o(i.phy_ksz8081_get_link_status) referenced from phy_ksz8081.o(.constdata)
 <LI><a href="#[d3]">phy_ksz8081_get_speed</a> from phy_ksz8081.o(i.phy_ksz8081_get_speed) referenced from phy_ksz8081.o(.constdata)
 <LI><a href="#[d2]">phy_ksz8081_init</a> from phy_ksz8081.o(i.phy_ksz8081_init) referenced from phy_ksz8081.o(.constdata)
 <LI><a href="#[ab]">rx_task</a> from demo.o(i.rx_task) referenced from demo.o(.constdata)
 <LI><a href="#[a8]">setsockopt_internal</a> from sock_options.o(i.setsockopt_internal) referenced from sock_options.o(i.setsockopt_cmd_issue)
 <LI><a href="#[53]">sock_stream_change_backlog</a> from sock_stream.o(i.sock_stream_change_backlog) referenced from sock_stream.o(i.SOCK_STREAM_listen)
 <LI><a href="#[5e]">tcb_blocking_linger_timeout_expire</a> from tcp_clos.o(i.tcb_blocking_linger_timeout_expire) referenced from tcp_clos.o(i.TCP_Process_close)
 <LI><a href="#[5d]">tcb_linger_timeout_expire</a> from tcp_clos.o(i.tcb_linger_timeout_expire) referenced from tcp_clos.o(i.TCP_Process_close)
 <LI><a href="#[ac]">tx_task</a> from demo.o(i.tx_task) referenced from demo.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[e6]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolchain_startup
</UL>

<P><STRONG><a name="[e7]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e9]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[387]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[388]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[389]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[38a]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[ea]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[38b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[e5]"></a>__boot</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, boot.o(. text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = __boot &rArr; toolchain_startup &rArr; init_hardware &rArr; _bsp_initialize_hardware &rArr; CPU_SetClockConfigGenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolchain_startup
</UL>

<P><STRONG><a name="[f1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ec]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[38c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[38d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[38e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[38f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[390]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[391]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[392]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[393]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[394]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[395]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[396]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[397]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[398]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[399]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))

<P><STRONG><a name="[39a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[39b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[39c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[39d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[39e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[39f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[f6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[3a0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[3a1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[3a2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[3a3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[3a4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[3a5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[3a6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[e8]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[3a7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ee]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[3a8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[f2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; _mqx &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[108]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[3aa]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[ef]"></a>__user_setup_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comp.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2bc]"></a>__set_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psp_supp.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_ticks_to_time
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_msecs_to_ticks_quick
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_div_128_by_32
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_ioctl
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_channel_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt_period_prescaler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[3ab]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint_prt64
</UL>

<P><STRONG><a name="[f9]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[183]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_recv
</UL>

<P><STRONG><a name="[279]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fputs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[2cd]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_id_from_name
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_drvif
</UL>

<P><STRONG><a name="[fb]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_return_addr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_accept
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_add
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_get_membership
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_to_ring
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Use_ringbuffer
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_from_ring
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_memcopy
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Clone_tcb
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_send
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_gratuitous_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_return_req2socket_from_rx_queue
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_dup
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_recv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_ioctl
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_rx_bds
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_ioctl
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
</UL>

<P><STRONG><a name="[fd]"></a>memmove</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
</UL>

<P><STRONG><a name="[ff]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_stack_frame
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt_cmd_issue
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_create
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_if_add
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool_mapped
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_socket
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_sendto
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_recvfrom
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_connect
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc_zero
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_internal
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_deinit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tcd_reg2mem
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tcd_mem2reg
</UL>

<P><STRONG><a name="[277]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[101]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3ac]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
</UL>

<P><STRONG><a name="[103]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3ad]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[100]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[3af]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[104]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[3b4]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[f4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[3b8]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>_sched_start_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[345]"></a>_sched_run_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>

<P><STRONG><a name="[310]"></a>_sched_check_scheduler_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_start_preemption
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_internal
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
</UL>

<P><STRONG><a name="[31f]"></a>_sched_execute_scheduler_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
</UL>

<P><STRONG><a name="[109]"></a>_mqx_api_call</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_api_call
</UL>

<P><STRONG><a name="[1fc]"></a>_task_block</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_task
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_task
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_internal
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive_internal
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_exit
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
</UL>

<P><STRONG><a name="[11]"></a>_svc_handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _svc_handler &rArr; _klog_block_internal &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_block_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectors_rom)
</UL>
<P><STRONG><a name="[12]"></a>_pend_svc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _pend_svc &rArr; _klog_context_switch_internal &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_context_switch_internal
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_context_switch_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectors_rom)
</UL>
<P><STRONG><a name="[10]"></a>_int_kernel_isr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = _int_kernel_isr &rArr; _klog_isr_start_internal &rArr; _int_get_isr_data &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_isr_start_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> vectors.o(.vectors_rom)
<LI> int.o(i._int_init)
</UL>
<P><STRONG><a name="[3bb]"></a>_psp_exception_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[3bc]"></a>_psp_save_fp_context_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[3bd]"></a>_mem_test_and_set</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[3be]"></a>__get_PSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[3bf]"></a>__get_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[339]"></a>__set_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_install
</UL>

<P><STRONG><a name="[3c0]"></a>__get_PSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[3c1]"></a>__enable_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[3c2]"></a>__disable_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[3c3]"></a>__get_LR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[3c4]"></a>__get_PC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[3c5]"></a>__get_CONTROL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[10f]"></a>ARP_close</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, arp.o(i.ARP_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ARP_close &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_open
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_close
</UL>

<P><STRONG><a name="[125]"></a>ARP_do_proxy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proxyarp.o(i.ARP_do_proxy))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_service
</UL>

<P><STRONG><a name="[11a]"></a>ARP_is_complete</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, arp.o(i.ARP_is_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ARP_is_complete &rArr; ARP_find
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_find
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_bind_finish
</UL>

<P><STRONG><a name="[11c]"></a>ARP_open</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, arp.o(i.ARP_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ARP_open &rArr; RTCS_mem_alloc_zero &rArr; _lwmem_alloc_zero_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_get_address
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_open
</UL>

<P><STRONG><a name="[120]"></a>ARP_request</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, arp.o(i.ARP_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ARP_request &rArr; ARP_send &rArr; RTCSPCB_alloc_send &rArr; RTCSPCB_alloc &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_send
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_insert
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_gratuitous_send
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_find
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_bind
</UL>

<P><STRONG><a name="[121]"></a>ARP_resolve</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, arp.o(i.ARP_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ARP_resolve &rArr; IPE_send_IP_ucast &rArr; IPE_send &rArr; ENET_send &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_add
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send_IP_ucast
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_insert
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_find
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send_IP
</UL>

<P><STRONG><a name="[23]"></a>ARP_service</STRONG> (Thumb, 632 bytes, Stack size 56 bytes, arp.o(i.ARP_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = ARP_service &rArr; IP_is_local &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_add
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send_IP_ucast
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send_ARP_ucast
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_is_local
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_fork
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_do_proxy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_insert
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip-e.o(i.IPE_recv_ARP)
</UL>
<P><STRONG><a name="[128]"></a>BOOT_close</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bootcomm.o(i.BOOT_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BOOT_close &rArr; UDP_close_internal &rArr; RTCS_cmd_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_close_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_release_internal
</UL>

<P><STRONG><a name="[212]"></a>BOOT_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bootinit.o(i.BOOT_init))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
</UL>

<P><STRONG><a name="[12a]"></a>BOOT_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bootcomm.o(i.BOOT_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = BOOT_send &rArr; UDP_send_IF &rArr; IP_send_IF &rArr; IP_send_dgram &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_IF
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_send_one_shot
</UL>

<P><STRONG><a name="[27e]"></a>CPU_GetClockConfiguration</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_cm.o(i.CPU_GetClockConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock_configuration
</UL>

<P><STRONG><a name="[12d]"></a>CPU_GetClockGenMode</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, bsp_cm.o(i.CPU_GetClockGenMode))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetClockConfigGenMode
</UL>

<P><STRONG><a name="[291]"></a>CPU_MCGAutoTrim</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, bsp_cm.o(i.CPU_MCGAutoTrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_MCGAutoTrim
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_osc_autotrim
</UL>

<P><STRONG><a name="[12c]"></a>CPU_SetClockConfigGenMode</STRONG> (Thumb, 1044 bytes, Stack size 20 bytes, bsp_cm.o(i.CPU_SetClockConfigGenMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CPU_SetClockConfigGenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetClockGenMode
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_initialize_hardware
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetClockConfiguration
</UL>

<P><STRONG><a name="[12e]"></a>CPU_SetClockConfiguration</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, bsp_cm.o(i.CPU_SetClockConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CPU_SetClockConfiguration &rArr; CPU_SetClockConfigGenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDD_SetClockConfiguration
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetClockConfigGenMode
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_set_clock_configuration
</UL>

<P><STRONG><a name="[130]"></a>DHCPCLNT_release</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ifdhcp.o(i.DHCPCLNT_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = DHCPCLNT_release &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_unbind_internal_actual
</UL>

<P><STRONG><a name="[17]"></a>DHCPCLNT_release_internal</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dhcpclnt.o(i.DHCPCLNT_release_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = DHCPCLNT_release_internal &rArr; DHCPCLNT_send_one_shot &rArr; BOOT_send &rArr; UDP_send_IF &rArr; IP_send_IF &rArr; IP_send_dgram &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_internal
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOT_close
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_send_one_shot
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_modify_options
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ifdhcp.o(i.DHCPCLNT_release)
</UL>
<P><STRONG><a name="[1a8]"></a>ENET_Dequeue_Buffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, enutil.o(i.ENET_Dequeue_Buffer))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_send
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_add_buffers_to_rx_ring
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_rx_bds
</UL>

<P><STRONG><a name="[1ac]"></a>ENET_Enqueue_Buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, enutil.o(i.ENET_Enqueue_Buffer))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_rx_free_specific
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_rx_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_rx_bds
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_discard_current_rx
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_tx_bds
</UL>

<P><STRONG><a name="[139]"></a>ENET_close</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, enclose.o(i.ENET_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ENET_close &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_open
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_close
</UL>

<P><STRONG><a name="[1bf]"></a>ENET_find_receiver</STRONG> (Thumb, 332 bytes, Stack size 36 bytes, enrecv.o(i.ENET_find_receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ENET_find_receiver
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_rx_bds
</UL>

<P><STRONG><a name="[17f]"></a>ENET_get_MTU</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, enutil.o(i.ENET_get_MTU))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_open
</UL>

<P><STRONG><a name="[11f]"></a>ENET_get_address</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, enaddr.o(i.ENET_get_address))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_open
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_open
</UL>

<P><STRONG><a name="[17e]"></a>ENET_get_options</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, enutil.o(i.ENET_get_options))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_open
</UL>

<P><STRONG><a name="[13c]"></a>ENET_initialize</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, eninit.o(i.ENET_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ENET_initialize &rArr; ENET_initialize_ex &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_initialize_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_init_device
</UL>

<P><STRONG><a name="[13d]"></a>ENET_initialize_ex</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, eninit.o(i.ENET_initialize_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ENET_initialize_ex &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_link_io_component_handle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_max_framesize
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_initialize
</UL>

<P><STRONG><a name="[144]"></a>ENET_join</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, enjoin.o(i.ENET_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ENET_join &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_join
</UL>

<P><STRONG><a name="[145]"></a>ENET_leave</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, enleave.o(i.ENET_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ENET_leave &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_leave
</UL>

<P><STRONG><a name="[17d]"></a>ENET_link_status</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, enutil.o(i.ENET_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ENET_link_status
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_get_link_status
</UL>

<P><STRONG><a name="[140]"></a>ENET_max_framesize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, enutil.o(i.ENET_max_framesize))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_initialize_ex
</UL>

<P><STRONG><a name="[146]"></a>ENET_open</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, enopen.o(i.ENET_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ENET_open &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_open
</UL>

<P><STRONG><a name="[147]"></a>ENET_send</STRONG> (Thumb, 456 bytes, Stack size 80 bytes, ensend.o(i.ENET_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ENET_send &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send
</UL>

<P><STRONG><a name="[14a]"></a>ENET_shutdown</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, enstop.o(i.ENET_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ENET_shutdown &rArr; _lwsem_destroy &rArr; _lwsem_destroy_internal &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_unlink_io_component_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_init_device
</UL>

<P><STRONG><a name="[14c]"></a>ICMP_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, icmp.o(i.ICMP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = ICMP_init &rArr; IP_open &rArr; RTCS_mem_alloc &rArr; _lwmem_alloc_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_open
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
</UL>

<P><STRONG><a name="[14e]"></a>ICMP_send_error</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, icmp.o(i.ICMP_send_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_service
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPLOCAL_service
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_recv
</UL>

<P><STRONG><a name="[14f]"></a>ICMP_send_error_internal</STRONG> (Thumb, 756 bytes, Stack size 88 bytes, icmp.o(i.ICMP_send_error_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_system
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_find_if
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_find
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_send
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_will_fragment
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_PCB
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_is_local
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_depend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_append_fragment_autofree
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_append_fragment
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error
</UL>

<P><STRONG><a name="[19]"></a>ICMP_service</STRONG> (Thumb, 1198 bytes, Stack size 96 bytes, icmp.o(i.ICMP_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = ICMP_service &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_internal
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_get_ipif_addr
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_next
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_find_if
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_find
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_timer_get_interval
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_time_get
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_will_fragment
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_source
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_dest
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_PCB
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_is_local
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_is_gate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_if_is_joined
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_addr_is_broadcast
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_fork
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icmp.o(i.ICMP_init)
</UL>
<P><STRONG><a name="[170]"></a>IGMP_filter_add</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, igmputil.o(i.IGMP_filter_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IGMP_filter_add
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_if
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_if_local
</UL>

<P><STRONG><a name="[177]"></a>IGMP_filter_rm</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, igmputil.o(i.IGMP_filter_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IGMP_filter_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_if_local
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_if
</UL>

<P><STRONG><a name="[163]"></a>IGMP_get_membership</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, soigmp.o(i.IGMP_get_membership))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IGMP_get_membership &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_getopt
</UL>

<P><STRONG><a name="[cb]"></a>IGMP_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, igmp.o(i.IGMP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = IGMP_init &rArr; IP_open &rArr; RTCS_mem_alloc &rArr; _lwmem_alloc_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcsinit.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>IGMP_init_timer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, igmp.o(i.IGMP_init_timer))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_if
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_rcv_query
</UL>

<P><STRONG><a name="[188]"></a>IGMP_ipif_add</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, igmputil.o(i.IGMP_ipif_add))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_add
</UL>

<P><STRONG><a name="[164]"></a>IGMP_ipif_bind</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, igmputil.o(i.IGMP_ipif_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = IGMP_ipif_bind &rArr; IGMP_join_if_local &rArr; IGMP_member_create &rArr; RTCS_part_alloc_zero &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_if_local
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_bind_finish
</UL>

<P><STRONG><a name="[1f]"></a>IGMP_ipif_unbind</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, soigmp.o(i.IGMP_ipif_unbind))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = IGMP_ipif_unbind &rArr; IGMP_leave_socket_all &rArr; IGMP_leave_group &rArr; IGMP_leave_if &rArr; IP_find_if &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_find
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_if_local
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_socket_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soigmp.o(i.IGMP_join_if)
</UL>
<P><STRONG><a name="[1d]"></a>IGMP_ipif_unbind_nosock</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, igmputil.o(i.IGMP_ipif_unbind_nosock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IGMP_ipif_unbind_nosock &rArr; IGMP_leave_if_local &rArr; IGMP_member_delete &rArr; RTCS_part_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_if_local
</UL>
<BR>[Address Reference Count : 1]<UL><LI> igmputil.o(i.IGMP_ipif_add)
</UL>
<P><STRONG><a name="[169]"></a>IGMP_is_member</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, igmputil.o(i.IGMP_is_member))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = IGMP_is_member &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_walk
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
</UL>

<P><STRONG><a name="[16b]"></a>IGMP_join_group</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, soigmp.o(i.IGMP_join_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = IGMP_join_group &rArr; IGMP_join_if &rArr; IP_find_if &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_if
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_socket
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_setopt
</UL>

<P><STRONG><a name="[16d]"></a>IGMP_join_if</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, soigmp.o(i.IGMP_join_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = IGMP_join_if &rArr; IP_find_if &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_find_if
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_find
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_delete
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_create
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_launch_timer
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_init_timer
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_filter_add
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_group
</UL>

<P><STRONG><a name="[165]"></a>IGMP_join_if_local</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, igmputil.o(i.IGMP_join_if_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = IGMP_join_if_local &rArr; IGMP_member_create &rArr; RTCS_part_alloc_zero &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_delete
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_create
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_filter_add
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_ipif_bind
</UL>

<P><STRONG><a name="[173]"></a>IGMP_launch_timer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, igmp.o(i.IGMP_launch_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IGMP_launch_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_add
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_if
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_rcv_query
</UL>

<P><STRONG><a name="[174]"></a>IGMP_leave_group</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, soigmp.o(i.IGMP_leave_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = IGMP_leave_group &rArr; IGMP_leave_if &rArr; IP_find_if &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_if
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_if_all
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_setopt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_socket_all
</UL>

<P><STRONG><a name="[175]"></a>IGMP_leave_if</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, soigmp.o(i.IGMP_leave_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = IGMP_leave_if &rArr; IP_find_if &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_find_if
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_stop_timer
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_find
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_delete
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_filter_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_group
</UL>

<P><STRONG><a name="[20]"></a>IGMP_leave_if_all</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, soigmp.o(i.IGMP_leave_if_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = IGMP_leave_if_all &rArr; IGMP_leave_group &rArr; IGMP_leave_if &rArr; IP_find_if &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_group
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soigmp.o(i.IGMP_join_socket)
</UL>
<P><STRONG><a name="[167]"></a>IGMP_leave_if_local</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, igmputil.o(i.IGMP_leave_if_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IGMP_leave_if_local &rArr; IGMP_member_delete &rArr; RTCS_part_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_delete
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_filter_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_ipif_unbind
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_ipif_unbind_nosock
</UL>

<P><STRONG><a name="[16f]"></a>IGMP_member_create</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, igmputil.o(i.IGMP_member_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = IGMP_member_create &rArr; RTCS_part_alloc_zero &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_if
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_socket
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_if_local
</UL>

<P><STRONG><a name="[171]"></a>IGMP_member_delete</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, igmputil.o(i.IGMP_member_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IGMP_member_delete &rArr; RTCS_part_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_free
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_if_local
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_if
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_if
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_socket
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_if_local
</UL>

<P><STRONG><a name="[166]"></a>IGMP_member_find</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, igmputil.o(i.IGMP_member_find))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_if
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_if
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_ipif_unbind
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_socket_all
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_socket
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_socket
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_is_member_test
</UL>

<P><STRONG><a name="[161]"></a>IGMP_send_report</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, igmp.o(i.IGMP_send_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = IGMP_send_report &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_find_if
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_send
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_sum_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_expire
</UL>

<P><STRONG><a name="[176]"></a>IGMP_stop_timer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, igmp.o(i.IGMP_stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IGMP_stop_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_if
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_rcv_report
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_rcv_query
</UL>

<P><STRONG><a name="[c6]"></a>IPE_close</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ip-e.o(i.IPE_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = IPE_close &rArr; ENET_close &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_close
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip-e.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>IPE_get_link_status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ip-e.o(i.IPE_get_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IPE_get_link_status &rArr; ENET_link_status
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_link_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip-e.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>IPE_join</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ip-e.o(i.IPE_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = IPE_join &rArr; ENET_join &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_join
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip-e.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>IPE_leave</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ip-e.o(i.IPE_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = IPE_leave &rArr; ENET_leave &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_leave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip-e.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>IPE_open</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, ip-e.o(i.IPE_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = IPE_open &rArr; ARP_open &rArr; RTCS_mem_alloc_zero &rArr; _lwmem_alloc_zero_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_get_address
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_get_options
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_get_MTU
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_rand_seed
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_open
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_close
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_open
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip-e.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>IPE_recv</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, ip-e.o(i.IPE_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = IPE_recv &rArr; RTCSPCB_alloc_recv &rArr; RTCSPCB_alloc &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_service
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_next
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_recv
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_recv_IP
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_recv_ARP
</UL>

<P><STRONG><a name="[22]"></a>IPE_recv_ARP</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ip-e.o(i.IPE_recv_ARP))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = IPE_recv_ARP &rArr; IPE_recv &rArr; RTCSPCB_alloc_recv &rArr; RTCSPCB_alloc &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip-e.o(i.IPE_open)
</UL>
<P><STRONG><a name="[21]"></a>IPE_recv_IP</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ip-e.o(i.IPE_recv_IP))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = IPE_recv_IP &rArr; IPE_recv &rArr; RTCSPCB_alloc_recv &rArr; RTCSPCB_alloc &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip-e.o(i.IPE_open)
</UL>
<P><STRONG><a name="[185]"></a>IPE_send</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ip-e.o(i.IPE_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = IPE_send &rArr; ENET_send &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_send
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send_IP_ucast
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send_IP
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send_ARP_ucast
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send_ARP_bcast
</UL>

<P><STRONG><a name="[117]"></a>IPE_send_ARP_bcast</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ip-e.o(i.IPE_send_ARP_bcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = IPE_send_ARP_bcast &rArr; IPE_send &rArr; ENET_send &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_send
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_gratuitous_send
</UL>

<P><STRONG><a name="[127]"></a>IPE_send_ARP_ucast</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ip-e.o(i.IPE_send_ARP_ucast))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = IPE_send_ARP_ucast &rArr; IPE_send &rArr; ENET_send &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_service
</UL>

<P><STRONG><a name="[c7]"></a>IPE_send_IP</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, ip-e.o(i.IPE_send_IP))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = IPE_send_IP &rArr; ARP_resolve &rArr; IPE_send_IP_ucast &rArr; IPE_send &rArr; ENET_send &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_resolve
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip-e.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>IPE_send_IP_ucast</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip-e.o(i.IPE_send_IP_ucast))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = IPE_send_IP_ucast &rArr; IPE_send &rArr; ENET_send &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_service
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_resolve
</UL>

<P><STRONG><a name="[25]"></a>IPIF_add</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ip_if.o(i.IPIF_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = IPIF_add &rArr; RTCS_mem_alloc_zero &rArr; _lwmem_alloc_zero_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_if_list_del
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_if_list_add
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_ipif_add
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtcs_if.o(i.RTCS_if_add)
<LI> iplocal.o(i.IPLOCAL_init)
</UL>
<P><STRONG><a name="[46]"></a>IPIF_bind</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ip_if.o(i.IPIF_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = IPIF_bind &rArr; IPIF_bind_finish &rArr; IP_route_add_direct &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_bind_finish
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcs_if.o(i.RTCS_if_probe_and_bind)
</UL>
<P><STRONG><a name="[47]"></a>IPIF_bind_finish</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ip_if.o(i.IPIF_bind_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = IPIF_bind_finish &rArr; IP_route_add_direct &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_is_complete
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_direct
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_ipif_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcs_if.o(i.RTCS_if_probe_and_bind)
</UL>
<P><STRONG><a name="[43]"></a>IPIF_gate_add</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ip_if.o(i.IPIF_gate_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = IPIF_gate_add &rArr; IP_route_add_indirect &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_indirect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcs_if.o(i.RTCS_gate_add)
</UL>
<P><STRONG><a name="[1a]"></a>IPIF_gate_add_redirect</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ip_if.o(i.IPIF_gate_add_redirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = IPIF_gate_add_redirect &rArr; IP_route_add_indirect &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_indirect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icmp.o(i.ICMP_service)
</UL>
<P><STRONG><a name="[44]"></a>IPIF_gate_remove</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ip_if.o(i.IPIF_gate_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = IPIF_gate_remove &rArr; IP_route_remove_indirect &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_remove_indirect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcs_if.o(i.RTCS_gate_remove)
</UL>
<P><STRONG><a name="[48]"></a>IPIF_remove</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ip_if.o(i.IPIF_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = IPIF_remove &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_if_list_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcs_if.o(i.RTCS_if_remove)
</UL>
<P><STRONG><a name="[18]"></a>IPIF_unbind</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ip_if.o(i.IPIF_unbind))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = IPIF_unbind &rArr; IP_route_remove_direct &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_get_netmask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_remove_direct
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dhcpclnt.o(i.DHCPCLNT_release_internal)
<LI> rtcs_if.o(i.RTCS_if_unbind)
</UL>
<P><STRONG><a name="[cf]"></a>IPLOCAL_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iplocal.o(i.IPLOCAL_close))
<BR>[Address Reference Count : 1]<UL><LI> iplocal.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>IPLOCAL_init</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, iplocal.o(i.IPLOCAL_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IPLOCAL_init &rArr; RTCS_cmd_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
</UL>

<P><STRONG><a name="[ce]"></a>IPLOCAL_open</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iplocal.o(i.IPLOCAL_open))
<BR>[Address Reference Count : 1]<UL><LI> iplocal.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>IPLOCAL_send</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, iplocal.o(i.IPLOCAL_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = IPLOCAL_send &rArr; IPLOCAL_service &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_service
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPLOCAL_service
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iplocal.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>IPLOCAL_service</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, iplocal.o(i.IPLOCAL_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = IPLOCAL_service &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_next
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPLOCAL_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iplocal.o(i.IPLOCAL_send)
</UL>
<P><STRONG><a name="[192]"></a>IPRADIX_findbest</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ipradix.o(i.IPRADIX_findbest))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IPRADIX_findbest
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_find
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_is_gate
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_get_netmask
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_MTU
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_local
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route
</UL>

<P><STRONG><a name="[19d]"></a>IPRADIX_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ipradix.o(i.IPRADIX_init))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_init
</UL>

<P><STRONG><a name="[18f]"></a>IPRADIX_insert</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, ipradix.o(i.IPRADIX_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_free
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_find_if
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_is_local
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_remove_indirect
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_remove_direct
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_indirect
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_direct
</UL>

<P><STRONG><a name="[16a]"></a>IPRADIX_walk</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ipradix.o(i.IPRADIX_walk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IPRADIX_walk
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_get_ipif_addr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_multi
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_is_member
</UL>

<P><STRONG><a name="[191]"></a>IP_MTU</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, iputil.o(i.IP_MTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = IP_MTU &rArr; IP_find_if &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_find_if
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_findbest
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_set_rcvmss
</UL>

<P><STRONG><a name="[156]"></a>IP_Sum_PCB</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, checksum.o(i.IP_Sum_PCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IP_Sum_PCB &rArr; _mem_sum_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_sum_ip
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_immediate
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_IP_packet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Service_packet
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_service
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_IF
</UL>

<P><STRONG><a name="[193]"></a>IP_Sum_immediate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, checksum.o(i.IP_Sum_immediate))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_pseudo
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_PCB
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_recv
</UL>

<P><STRONG><a name="[194]"></a>IP_Sum_pseudo</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, checksum.o(i.IP_Sum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IP_Sum_pseudo &rArr; _mem_sum_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_sum_ip
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_immediate
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Service_packet
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
</UL>

<P><STRONG><a name="[15d]"></a>IP_addr_is_broadcast</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ip.o(i.IP_addr_is_broadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = IP_addr_is_broadcast &rArr; IP_get_ipif_addr &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_get_ipif_addr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_get_netmask
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_service
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_local
</UL>

<P><STRONG><a name="[29]"></a>IP_complete_recv</STRONG> (Thumb, 326 bytes, Stack size 64 bytes, ip.o(i.IP_complete_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = IP_complete_recv &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_next
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_immediate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_fork
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ip.o(i.IP_service)
<LI> ip.o(i.IP_complete_send)
</UL>
<P><STRONG><a name="[39]"></a>IP_complete_send</STRONG> (Thumb, 628 bytes, Stack size 80 bytes, ip.o(i.IP_complete_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = IP_complete_send &rArr; IP_complete_recv &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_system
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_recv
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_memcopy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_pseudo
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_sum_ip
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_recv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ip.o(i.IP_send)
<LI> ip.o(i.IP_send_IF)
</UL>
<P><STRONG><a name="[159]"></a>IP_dest</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ip.o(i.IP_dest))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Service_packet
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
</UL>

<P><STRONG><a name="[154]"></a>IP_find_if</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, iputil.o(i.IP_find_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = IP_find_if &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_if
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_if
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_IP_packet
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_MTU
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_send_report
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
</UL>

<P><STRONG><a name="[15e]"></a>IP_get_ipif_addr</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, iputil.o(i.IP_get_ipif_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = IP_get_ipif_addr &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_walk
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_service
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_addr_is_broadcast
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_local
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_option_handler
</UL>

<P><STRONG><a name="[18d]"></a>IP_get_netmask</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, iputil.o(i.IP_get_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = IP_get_netmask &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_findbest
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_unbind
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_addr_is_broadcast
</UL>

<P><STRONG><a name="[196]"></a>IP_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ip.o(i.IP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = IP_init &rArr; RTCS_part_create &rArr; _partition_create &rArr; _partition_create_internal &rArr; _partition_create_component &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_create
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
</UL>

<P><STRONG><a name="[15a]"></a>IP_is_gate</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, iputil.o(i.IP_is_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = IP_is_gate &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_findbest
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
</UL>

<P><STRONG><a name="[124]"></a>IP_is_local</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, iputil.o(i.IP_is_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = IP_is_local &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_service
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route
</UL>

<P><STRONG><a name="[14d]"></a>IP_open</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, iplocal.o(i.IP_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = IP_open &rArr; RTCS_mem_alloc &rArr; _lwmem_alloc_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_init
</UL>

<P><STRONG><a name="[19a]"></a>IP_route</STRONG> (Thumb, 214 bytes, Stack size 96 bytes, iproute.o(i.IP_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_findbest
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_is_local
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_service
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send
</UL>

<P><STRONG><a name="[189]"></a>IP_route_add_direct</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, iproute.o(i.IP_route_add_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = IP_route_add_direct &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_free
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_insert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROUTE_new_bindif
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_bind_finish
</UL>

<P><STRONG><a name="[18a]"></a>IP_route_add_indirect</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, iproute.o(i.IP_route_add_indirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = IP_route_add_indirect &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_free
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_gate_add
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_gate_add_redirect
</UL>

<P><STRONG><a name="[153]"></a>IP_route_find</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, iputil.o(i.IP_route_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = IP_route_find &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_findbest
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_route_find
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_IP_packet
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
</UL>

<P><STRONG><a name="[198]"></a>IP_route_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iproute.o(i.IP_route_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IP_route_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_init
</UL>

<P><STRONG><a name="[19e]"></a>IP_route_local</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, iproute.o(i.IP_route_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = IP_route_local &rArr; IP_send_dgram &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_get_ipif_addr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_findbest
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_addr_is_broadcast
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_service
</UL>

<P><STRONG><a name="[19f]"></a>IP_route_multi</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, iproute.o(i.IP_route_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + In Cycle
<LI>Call Chain = IP_route_multi &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_walk
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send
</UL>

<P><STRONG><a name="[18c]"></a>IP_route_remove_direct</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, iproute.o(i.IP_route_remove_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = IP_route_remove_direct &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_unbind
</UL>

<P><STRONG><a name="[18b]"></a>IP_route_remove_indirect</STRONG> (Thumb, 112 bytes, Stack size 80 bytes, iproute.o(i.IP_route_remove_indirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = IP_route_remove_indirect &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_gate_remove
</UL>

<P><STRONG><a name="[157]"></a>IP_send</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ip.o(i.IP_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_multi
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_IP_packet
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_send_report
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
</UL>

<P><STRONG><a name="[1a1]"></a>IP_send_IF</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, ip.o(i.IP_send_IF))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = IP_send_IF &rArr; IP_send_dgram &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_IF
</UL>

<P><STRONG><a name="[19b]"></a>IP_send_dgram</STRONG> (Thumb, 946 bytes, Stack size 96 bytes, ip.o(i.IP_send_dgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = IP_send_dgram &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_system
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_send
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_append_fragment_autofree
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_sum_ip
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_multi
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_local
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_IF
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_multi_test
</UL>

<P><STRONG><a name="[24]"></a>IP_service</STRONG> (Thumb, 656 bytes, Stack size 48 bytes, ip.o(i.IP_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = IP_service &rArr; IP_route_local &rArr; IP_send_dgram &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_get_ipif_addr
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_addr_is_broadcast
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_sum_ip
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_shrink
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_local
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_option_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip-e.o(i.IPE_recv_IP)
</UL>
<P><STRONG><a name="[158]"></a>IP_source</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ip.o(i.IP_source))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Service_packet
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_fromaddr
</UL>

<P><STRONG><a name="[155]"></a>IP_will_fragment</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ip.o(i.IP_will_fragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IP_will_fragment
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_IP_packet
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
</UL>

<P><STRONG><a name="[12f]"></a>LDD_SetClockConfiguration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_cm.o(i.LDD_SetClockConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetClockConfiguration
</UL>

<P><STRONG><a name="[3b]"></a>MACNET_RX_ISR</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, macnet_receive.o(i.MACNET_RX_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MACNET_RX_ISR &rArr; MACNET_process_rx_bds &rArr; ENET_find_receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_rx_bds
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macnet_util.o(i.MACNET_install_isrs)
</UL>
<P><STRONG><a name="[3a]"></a>MACNET_TX_ISR</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, macnet_send.o(i.MACNET_TX_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MACNET_TX_ISR &rArr; MACNET_process_tx_bds
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_tx_bds
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macnet_util.o(i.MACNET_install_isrs)
</UL>
<P><STRONG><a name="[1a6]"></a>MACNET_add_buffers_to_rx_ring</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, macnet_receive.o(i.MACNET_add_buffers_to_rx_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MACNET_add_buffers_to_rx_ring &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Dequeue_Buffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_swap4byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_rx_free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_rx_bds
</UL>

<P><STRONG><a name="[1ad]"></a>MACNET_free_context</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, macnet_util.o(i.MACNET_free_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MACNET_free_context &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_shutdown
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
</UL>

<P><STRONG><a name="[1af]"></a>MACNET_get_base_address</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, macnet_mk64.o(i.MACNET_get_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
</UL>

<P><STRONG><a name="[1b6]"></a>MACNET_get_vector</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, macnet_util.o(i.MACNET_get_vector))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_install_isr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_uninstall_isr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_mask_interrupts
</UL>

<P><STRONG><a name="[d5]"></a>MACNET_initialize</STRONG> (Thumb, 1312 bytes, Stack size 80 bytes, macnet_init.o(i.MACNET_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = MACNET_initialize &rArr; MACNET_install_isrs &rArr; MACNET_install_isr &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Enqueue_Buffer
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero_from
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_from
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_uninstall_all_isrs
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_io_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_install_isrs
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_get_base_address
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_free_context
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_add_buffers_to_rx_ring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macnet_init.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>MACNET_install_isr</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, macnet_util.o(i.MACNET_install_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = MACNET_install_isr &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_get_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_install_isrs
</UL>

<P><STRONG><a name="[1b3]"></a>MACNET_install_isrs</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, macnet_util.o(i.MACNET_install_isrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = MACNET_install_isrs &rArr; MACNET_install_isr &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_install_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
</UL>

<P><STRONG><a name="[1ae]"></a>MACNET_io_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, macnet_mk64.o(i.MACNET_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MACNET_io_init &rArr; _bsp_enet_io_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_enet_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
</UL>

<P><STRONG><a name="[da]"></a>MACNET_join</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, macnet_join.o(i.MACNET_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MACNET_join
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macnet_init.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>MACNET_mask_interrupts</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, macnet_util.o(i.MACNET_mask_interrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MACNET_mask_interrupts &rArr; _nvic_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_get_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_shutdown
</UL>

<P><STRONG><a name="[d8]"></a>MACNET_read_mii</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, macnet_mii.o(i.MACNET_read_mii))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = MACNET_read_mii &rArr; MACNET_read_write_mii &rArr; _time_delay &rArr; _sched_yield &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_read_write_mii
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macnet_init.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>MACNET_rejoin</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, macnet_rejoin.o(i.MACNET_rejoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MACNET_rejoin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macnet_init.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>MACNET_send</STRONG> (Thumb, 434 bytes, Stack size 72 bytes, macnet_send.o(i.MACNET_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MACNET_send &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Dequeue_Buffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_swap4byte
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_swap2byte
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macnet_init.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>MACNET_shutdown</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, macnet_stop.o(i.MACNET_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = MACNET_shutdown &rArr; MACNET_uninstall_all_isrs &rArr; MACNET_uninstall_isr &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_uninstall_all_isrs
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_free_context
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_mask_interrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macnet_init.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>MACNET_uninstall_all_isrs</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, macnet_util.o(i.MACNET_uninstall_all_isrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = MACNET_uninstall_all_isrs &rArr; MACNET_uninstall_isr &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_uninstall_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_shutdown
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
</UL>

<P><STRONG><a name="[d9]"></a>MACNET_write_mii</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, macnet_mii.o(i.MACNET_write_mii))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = MACNET_write_mii &rArr; MACNET_read_write_mii &rArr; _time_delay &rArr; _sched_yield &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_read_write_mii
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macnet_init.o(.constdata)
</UL>
<P><STRONG><a name="[28f]"></a>PE_low_level_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_cm.o(i.PE_low_level_init))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_low_level_init
</UL>

<P><STRONG><a name="[19c]"></a>ROUTE_new_bindif</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, route.o(i.ROUTE_new_bindif))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ROUTE_new_bindif &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_direct
</UL>

<P><STRONG><a name="[1c4]"></a>RTCSPCB_alloc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtcspcb.o(i.RTCSPCB_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = RTCSPCB_alloc &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_recv
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_send
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_dup
</UL>

<P><STRONG><a name="[1a0]"></a>RTCSPCB_alloc_dup</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, rtcspcb.o(i.RTCSPCB_alloc_dup))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = RTCSPCB_alloc_dup &rArr; RTCSPCB_alloc &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_hidden
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_depend
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_multi_test
</UL>

<P><STRONG><a name="[182]"></a>RTCSPCB_alloc_recv</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rtcspcb.o(i.RTCSPCB_alloc_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = RTCSPCB_alloc_recv &rArr; RTCSPCB_alloc &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_recv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
</UL>

<P><STRONG><a name="[114]"></a>RTCSPCB_alloc_send</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtcspcb.o(i.RTCSPCB_alloc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = RTCSPCB_alloc_send &rArr; RTCSPCB_alloc &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_reset
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_packet
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_reply_reset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_send_report
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_send_one_shot
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_send
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_gratuitous_send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
</UL>

<P><STRONG><a name="[135]"></a>RTCSPCB_append_fragment</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, rtcspcb.o(i.RTCSPCB_append_fragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTCSPCB_append_fragment
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_from_buffer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_append_fragment_autofree
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_send_one_shot
</UL>

<P><STRONG><a name="[152]"></a>RTCSPCB_append_fragment_autofree</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rtcspcb.o(i.RTCSPCB_append_fragment_autofree))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTCSPCB_append_fragment_autofree &rArr; RTCSPCB_append_fragment
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_append_fragment
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
</UL>

<P><STRONG><a name="[150]"></a>RTCSPCB_depend</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtcspcb.o(i.RTCSPCB_depend))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = RTCSPCB_depend &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_dup
</UL>

<P><STRONG><a name="[126]"></a>RTCSPCB_fork</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, rtcspcb.o(i.RTCSPCB_fork))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTCSPCB_fork
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_service
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_recv
</UL>

<P><STRONG><a name="[1c7]"></a>RTCSPCB_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtcspcb.o(i.RTCSPCB_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = RTCSPCB_init &rArr; RTCS_part_create &rArr; _partition_create &rArr; _partition_create_internal &rArr; _partition_create_component &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_create
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
</UL>

<P><STRONG><a name="[115]"></a>RTCSPCB_insert_header</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rtcspcb.o(i.RTCSPCB_insert_header))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_reset
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_packet
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_reply_reset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_send_report
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_send
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_gratuitous_send
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_IF
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_recv
</UL>

<P><STRONG><a name="[195]"></a>RTCSPCB_memcopy</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, rtcspcb.o(i.RTCSPCB_memcopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTCSPCB_memcopy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_rx_dgram_header_and_data
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_return_req2socket_from_pcb
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
</UL>

<P><STRONG><a name="[15c]"></a>RTCSPCB_next</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rtcspcb.o(i.RTCSPCB_next))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_recv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPLOCAL_service
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_recv
</UL>

<P><STRONG><a name="[1a3]"></a>RTCSPCB_shrink</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtcspcb.o(i.RTCSPCB_shrink))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_service
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
</UL>

<P><STRONG><a name="[1c8]"></a>RTCS_FD_CLR</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sock_select.o(i.RTCS_FD_CLR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTCS_FD_CLR &rArr; SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fds_check
</UL>

<P><STRONG><a name="[1ca]"></a>RTCS_FD_ISSET</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sock_select.o(i.RTCS_FD_ISSET))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTCS_FD_ISSET &rArr; SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1cb]"></a>RTCS_FD_SET</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sock_select.o(i.RTCS_FD_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTCS_FD_SET &rArr; SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fds_signal
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fds_poll
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_send
</UL>

<P><STRONG><a name="[206]"></a>RTCS_FD_ZERO</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sock_select.o(i.RTCS_FD_ZERO))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fds_signal
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fds_poll
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_select_expire
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_poll_fds
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_send
</UL>

<P><STRONG><a name="[111]"></a>RTCS_cmd_complete</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtcscmd.o(i.RTCS_cmd_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_error
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_select_unblock
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_select_expire
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_poll_fds
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt_internal
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_send
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_receive
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_create
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_bind
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_accept
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_stream_change_backlog
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_receive
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_process
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_open
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_connect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bind
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_close
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_abort
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_release_internal
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_if_del_dns_addr
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_unbind
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_remove
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_gate_remove
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_gate_add
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_bind_finish
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_bind
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_add
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_setopt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_getopt
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reply_receive
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_ack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Return_open
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_to_time_wait
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_gate_add_redirect
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_expire
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_release_pending_receive_requests
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_receive_expire
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_blocking_linger_timeout_expire
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_free_internal
</UL>

<P><STRONG><a name="[134]"></a>RTCS_cmd_internal</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtcscmd.o(i.RTCS_cmd_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTCS_cmd_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_release_internal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPLOCAL_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_close_internal
</UL>

<P><STRONG><a name="[131]"></a>RTCS_cmd_issue</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtcscmd.o(i.RTCS_cmd_issue))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_id_from_td
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_blocked_internal
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_alloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt_cmd_issue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_if_unbind
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_if_remove
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_if_probe_and_bind
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_if_del_dns_addr
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_if_add
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_gate_remove
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_gate_add
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_release
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_socket
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_send
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_recv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_listen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_connect
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_bind
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_accept
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_socket
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_sendto
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_recvfrom
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_connect
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_bind
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOL_IGMP_setsockopt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOL_IGMP_getsockopt
</UL>

<P><STRONG><a name="[184]"></a>RTCS_cmd_service</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, rtcscmd.o(i.RTCS_cmd_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = RTCS_cmd_service &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_priority
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_alloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_recv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPLOCAL_send
</UL>

<P><STRONG><a name="[1d4]"></a>RTCS_create</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, rtcscmd.o(i.RTCS_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = RTCS_create &rArr; RTCS_task_create &rArr; _task_create &rArr; _task_create_internal &rArr; _task_build_internal &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_hidden
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_get_id
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_destroy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_create
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_set_io_component_handle
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_create
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_destroy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_create
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_system_zero
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1dd]"></a>RTCS_gate_add</STRONG> (Thumb, 32 bytes, Stack size 56 bytes, rtcs_if.o(i.RTCS_gate_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = RTCS_gate_add &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_bind_staticip_internal
</UL>

<P><STRONG><a name="[1de]"></a>RTCS_gate_remove</STRONG> (Thumb, 32 bytes, Stack size 56 bytes, rtcs_if.o(i.RTCS_gate_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = RTCS_gate_remove &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_unbind_internal_actual
</UL>

<P><STRONG><a name="[1df]"></a>RTCS_geterror</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtcs.o(i.RTCS_geterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTCS_geterror &rArr; SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1e0]"></a>RTCS_if_add</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, rtcs_if.o(i.RTCS_if_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = RTCS_if_add &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_init_device
</UL>

<P><STRONG><a name="[1e1]"></a>RTCS_if_del_dns_addr</STRONG> (Thumb, 34 bytes, Stack size 56 bytes, rtcs_if.o(i.RTCS_if_del_dns_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = RTCS_if_del_dns_addr &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_del_dns_ip
</UL>

<P><STRONG><a name="[1e2]"></a>RTCS_if_probe_and_bind</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, rtcs_if.o(i.RTCS_if_probe_and_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = RTCS_if_probe_and_bind &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_bind_staticip_internal
</UL>

<P><STRONG><a name="[1e3]"></a>RTCS_if_remove</STRONG> (Thumb, 20 bytes, Stack size 48 bytes, rtcs_if.o(i.RTCS_if_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = RTCS_if_remove &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_init_device
</UL>

<P><STRONG><a name="[1e4]"></a>RTCS_if_unbind</STRONG> (Thumb, 24 bytes, Stack size 56 bytes, rtcs_if.o(i.RTCS_if_unbind))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = RTCS_if_unbind &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_unbind_internal_actual
</UL>

<P><STRONG><a name="[1d9]"></a>RTCS_log_error</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, rtcscmd.o(i.RTCS_log_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTCS_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_send
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_create
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_bind
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_close
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_effective_close
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_to_ring
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_reset
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_packet
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_to_Rbuffer
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_from_ring
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Update_send_window
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Transmit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_remove
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Tick_server
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_reply_reset
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reply_receive
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_ack
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_signal
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_to_time_wait
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_schedule
</UL>

<P><STRONG><a name="[199]"></a>RTCS_mem_alloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtcspart.o(i.RTCS_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = RTCS_mem_alloc &rArr; _lwmem_alloc_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_from
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_to_Rbuffer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_open
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Clone_tcb
</UL>

<P><STRONG><a name="[151]"></a>RTCS_mem_alloc_system</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtcspart.o(i.RTCS_mem_alloc_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = RTCS_mem_alloc_system &rArr; _lwmem_alloc_system_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_from
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_create
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_process
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
</UL>

<P><STRONG><a name="[1d5]"></a>RTCS_mem_alloc_system_zero</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtcspart.o(i.RTCS_mem_alloc_system_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = RTCS_mem_alloc_system_zero &rArr; _lwmem_alloc_system_zero_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero_from
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
</UL>

<P><STRONG><a name="[11d]"></a>RTCS_mem_alloc_zero</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtcspart.o(i.RTCS_mem_alloc_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = RTCS_mem_alloc_zero &rArr; _lwmem_alloc_zero_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero_from
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_send
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_create
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_open
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_add
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_open
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Clone_tcb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_init
</UL>

<P><STRONG><a name="[190]"></a>RTCS_part_alloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtcspart.o(i.RTCS_part_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_free
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_alloc_system
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc_zero
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_insert
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_indirect
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_direct
</UL>

<P><STRONG><a name="[178]"></a>RTCS_part_alloc_zero</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtcspart.o(i.RTCS_part_alloc_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = RTCS_part_alloc_zero &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Get_sock_struct
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_create
</UL>

<P><STRONG><a name="[197]"></a>RTCS_part_create</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, rtcspart.o(i.RTCS_part_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = RTCS_part_create &rArr; _partition_create &rArr; _partition_create_internal &rArr; _partition_create_component &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_alloc_system
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_system
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_init
</UL>

<P><STRONG><a name="[1db]"></a>RTCS_part_destroy</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtcspart.o(i.RTCS_part_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = RTCS_part_destroy &rArr; _partition_destroy &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
</UL>

<P><STRONG><a name="[179]"></a>RTCS_part_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtcspart.o(i.RTCS_part_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTCS_part_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_create
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Free_sock_struct
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_delete
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPRADIX_insert
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_free_internal
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_indirect
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_direct
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_delete_indirect_all
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_delete
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_indirect_sort
</UL>

<P><STRONG><a name="[162]"></a>RTCS_rand</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rtcsrand.o(i.RTCS_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTCS_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Start_sending
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_rcv_query
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_expire
</UL>

<P><STRONG><a name="[180]"></a>RTCS_rand_seed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtcsrand.o(i.RTCS_rand_seed))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_open
</UL>

<P><STRONG><a name="[116]"></a>RTCS_seterror</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtcscmd.o(i.RTCS_seterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTCS_seterror &rArr; _task_check_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_error
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_id
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_check_stack
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_highwater
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_service
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_service
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_recv
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_send
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_gratuitous_send
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_IF
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPLOCAL_service
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_recv
</UL>

<P><STRONG><a name="[200]"></a>RTCS_setsockerror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtcs.o(i.RTCS_setsockerror))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_send
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_recv
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_accept
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_sendto
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_recvfrom
</UL>

<P><STRONG><a name="[1f2]"></a>RTCS_shutdown</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, rtcs.o(i.RTCS_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = RTCS_shutdown &rArr; setsockopt &rArr; setsockopt_cmd_issue &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1f5]"></a>RTCS_socket</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, rtcs.o(i.RTCS_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = RTCS_socket &rArr; SOCK_Get_sock_struct &rArr; RTCS_part_alloc_zero &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Get_sock_struct
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Free_sock_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1da]"></a>RTCS_task_create</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, rtcstask.o(i.RTCS_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = RTCS_task_create &rArr; _task_create &rArr; _task_create_internal &rArr; _task_build_internal &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_hidden
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
</UL>

<P><STRONG><a name="[1fa]"></a>RTCS_task_exit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rtcstask.o(i.RTCS_task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = RTCS_task_exit &rArr; RTCS_task_resume_creator &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_block
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_resume_creator
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
</UL>

<P><STRONG><a name="[1fb]"></a>RTCS_task_resume_creator</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtcstask.o(i.RTCS_task_resume_creator))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = RTCS_task_resume_creator &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_exit
</UL>

<P><STRONG><a name="[15f]"></a>RTCS_time_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rtcsmsec.o(i.RTCS_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTCS_time_get &rArr; _time_get_elapsed &rArr; _psp_ticks_to_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_packet
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_oneshot_max
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Tick_server
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_ack
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_option_timestamp_add
</UL>

<P><STRONG><a name="[160]"></a>RTCS_timer_get_interval</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtcsmsec.o(i.RTCS_timer_get_interval))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Tick_server
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
</UL>

<P><STRONG><a name="[34f]"></a>SOCKADDR_check_addr</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sock_util.o(i.SOCKADDR_check_addr))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[34e]"></a>SOCKADDR_check_valid</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, sock_util.o(i.SOCKADDR_check_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SOCKADDR_check_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[1fe]"></a>SOCKADDR_return_addr</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sock_util.o(i.SOCKADDR_return_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SOCKADDR_return_addr &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_getsockname
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_getpeername
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_recvfrom
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_getsockname
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_getpeername
</UL>

<P><STRONG><a name="[1ff]"></a>SOCKADDR_route_find</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sock_util.o(i.SOCKADDR_route_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SOCKADDR_route_find &rArr; IP_route_find &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_find
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_connect
</UL>

<P><STRONG><a name="[1f7]"></a>SOCK_Free_sock_struct</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sock_util.o(i.SOCK_Free_sock_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SOCK_Free_sock_struct &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_socket
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_accept
</UL>

<P><STRONG><a name="[1f6]"></a>SOCK_Get_sock_struct</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, sock_util.o(i.SOCK_Get_sock_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = SOCK_Get_sock_struct &rArr; RTCS_part_alloc_zero &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_PROTOCOL_exists_in_system
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_socket
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_accept
</UL>

<P><STRONG><a name="[201]"></a>SOCK_PROTOCOL_exists_in_system</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sock_util.o(i.SOCK_PROTOCOL_exists_in_system))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Get_sock_struct
</UL>

<P><STRONG><a name="[1c9]"></a>SOCK_check_valid</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sock_util.o(i.SOCK_check_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_setsockerror
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_geterror
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_SET
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_ISSET
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockopt_common_prologue
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_CLR
</UL>

<P><STRONG><a name="[36b]"></a>SOCK_disallow_recv</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sock_util.o(i.SOCK_disallow_recv))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[36c]"></a>SOCK_disallow_send</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sock_util.o(i.SOCK_disallow_send))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[20a]"></a>SOCK_exists_in_system</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sock_util.o(i.SOCK_exists_in_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SOCK_exists_in_system &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fds_check
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt_internal
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_send
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_receive
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_bind
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_accept
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_receive
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_process
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_close
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_abort
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[bf]"></a>SOL_IGMP_getsockopt</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, soigmp.o(i.SOL_IGMP_getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = SOL_IGMP_getsockopt &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soigmp.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>SOL_IGMP_setsockopt</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, soigmp.o(i.SOL_IGMP_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = SOL_IGMP_setsockopt &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soigmp.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>SOL_IP_getsockopt</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, soip.o(i.SOL_IP_getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SOL_IP_getsockopt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soip.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>SOL_IP_setsockopt</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, soip.o(i.SOL_IP_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SOL_IP_setsockopt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soip.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>SOL_LINK_getsockopt</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, solink.o(i.SOL_LINK_getsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SOL_LINK_getsockopt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> solink.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>SOL_LINK_setsockopt</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, solink.o(i.SOL_LINK_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SOL_LINK_setsockopt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> solink.o(.constdata)
</UL>
<P><STRONG><a name="[20e]"></a>TCB_exists_in_system</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sock_util.o(i.TCB_exists_in_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = TCB_exists_in_system &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_send
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_receive
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_accept
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_keepalive
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_linger_timeout_expire
</UL>

<P><STRONG><a name="[122]"></a>TCPIP_Event_add</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, timer.o(i.TCPIP_Event_add))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_select_block
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_receive
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_close
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_service
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_resolve
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_launch_timer
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_time
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_keepalive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_start_keepalive_timer
</UL>

<P><STRONG><a name="[110]"></a>TCPIP_Event_cancel</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, timer.o(i.TCPIP_Event_cancel))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_select_unblock
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_process
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_release_internal
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_service
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_resolve
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_close
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_stop_timer
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_start_keepalive_timer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_to_time_wait
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_expire
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_release_pending_receive_requests
</UL>

<P><STRONG><a name="[119]"></a>TCPIP_Event_expire</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer.o(i.TCPIP_Event_expire))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_rcv_query
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_insert
</UL>

<P><STRONG><a name="[211]"></a>TCPIP_Event_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TCPIP_Event_init))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
</UL>

<P><STRONG><a name="[20f]"></a>TCPIP_Event_time</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, timer.o(i.TCPIP_Event_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TCPIP_Event_time
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_add
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
</UL>

<P><STRONG><a name="[42]"></a>TCPIP_task</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, tcpip.o(i.TCPIP_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = TCPIP_task &rArr; RTCSPCB_init &rArr; RTCS_part_create &rArr; _partition_create &rArr; _partition_create_internal &rArr; _partition_create_component &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_open
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_resume_creator
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_exit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_time
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_timer_get_interval
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPLOCAL_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOT_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_time_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcscmd.o(i.RTCS_create)
</UL>
<P><STRONG><a name="[234]"></a>TCP_Advance_receive_user</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp_rcv.o(i.TCP_Advance_receive_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TCP_Advance_receive_user
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
</UL>

<P><STRONG><a name="[215]"></a>TCP_Advertise_receive_window</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, tcp_rcv.o(i.TCP_Advertise_receive_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TCP_Advertise_receive_window &rArr; TCP_Must_send_ack &rArr; TCP_Timer_oneshot_max &rArr; TCP_Timer_start &rArr; RTCS_time_get &rArr; _time_get_elapsed &rArr; _psp_ticks_to_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Must_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Use_ringbuffer
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Start_receiving
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
</UL>

<P><STRONG><a name="[217]"></a>TCP_Clone_tcb</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, tcp.o(i.TCP_Clone_tcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = TCP_Clone_tcb &rArr; RTCS_mem_alloc_zero &rArr; _lwmem_alloc_zero_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[218]"></a>TCP_Close_TCB</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, tcp_clos.o(i.TCP_Close_TCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = TCP_Close_TCB &rArr; TCP_Setup_receive &rArr; TCP_Test_done_receive &rArr; TCP_Reply_receive &rArr; TCP_Use_ringbuffer &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_stop
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reply_receive
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Return_open
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_close
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_keepalive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_release
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_signal
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_abort
</UL>

<P><STRONG><a name="[21e]"></a>TCP_Copy_from_buffer</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tcp_buf.o(i.TCP_Copy_from_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TCP_Copy_from_buffer &rArr; RTCSPCB_append_fragment
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_append_fragment
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_packet
</UL>

<P><STRONG><a name="[21f]"></a>TCP_Copy_from_ring</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tcp_buf.o(i.TCP_Copy_from_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TCP_Copy_from_ring &rArr; RTCS_log_error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
</UL>

<P><STRONG><a name="[220]"></a>TCP_Copy_to_Rbuffer</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, tcp_buf.o(i.TCP_Copy_to_Rbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = TCP_Copy_to_Rbuffer &rArr; RTCS_mem_alloc &rArr; _lwmem_alloc_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_to_ring
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
</UL>

<P><STRONG><a name="[221]"></a>TCP_Copy_to_ring</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tcp_buf.o(i.TCP_Copy_to_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TCP_Copy_to_ring &rArr; RTCS_log_error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_send
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_to_Rbuffer
</UL>

<P><STRONG><a name="[22a]"></a>TCP_Event</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tcp.o(i.TCP_Event))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_close
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_packet
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_ack
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_signal
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[222]"></a>TCP_Free_TCB</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tcp_clos.o(i.TCP_Free_TCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = TCP_Free_TCB &rArr; TCP_Truncate_receive_chunks &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Truncate_receive_chunks
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_release
</UL>

<P><STRONG><a name="[cd]"></a>TCP_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, tcp.o(i.TCP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = TCP_Init &rArr; IP_open &rArr; RTCS_mem_alloc &rArr; _lwmem_alloc_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_resolution
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcsinit.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>TCP_Must_send_ack</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcp_rcv.o(i.TCP_Must_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TCP_Must_send_ack &rArr; TCP_Timer_oneshot_max &rArr; TCP_Timer_start &rArr; RTCS_time_get &rArr; _time_get_elapsed &rArr; _psp_ticks_to_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_oneshot_max
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_close
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_effective_close
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Advertise_receive_window
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[226]"></a>TCP_Process_RTT_measure</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, tcp_send.o(i.TCP_Process_RTT_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TCP_Process_RTT_measure
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_resolution
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_ack
</UL>

<P><STRONG><a name="[a2]"></a>TCP_Process_abort</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tcp_clos.o(i.TCP_Process_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = TCP_Process_abort &rArr; tcp_process_abort &rArr; TCP_Send_reset &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_close.o(i.closesocket)
</UL>
<P><STRONG><a name="[50]"></a>TCP_Process_accept</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tcp.o(i.TCP_Process_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = TCP_Process_accept &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCB_exists_in_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(i.SOCK_STREAM_accept)
</UL>
<P><STRONG><a name="[228]"></a>TCP_Process_ack</STRONG> (Thumb, 798 bytes, Stack size 48 bytes, tcp_send.o(i.TCP_Process_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = TCP_Process_ack &rArr; TCP_Transmit &rArr; TCP_Send_packet &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_resolution
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_time_get
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_RTT_measure
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_stop
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Transmit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[51]"></a>TCP_Process_bind</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, tcp.o(i.TCP_Process_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = TCP_Process_bind &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_is_port_used
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_set_port
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(i.SOCK_STREAM_bind)
</UL>
<P><STRONG><a name="[a3]"></a>TCP_Process_close</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, tcp_clos.o(i.TCP_Process_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = TCP_Process_close &rArr; TCP_Process_release &rArr;  TCP_Process_release (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_add
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_effective_close
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_release
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Must_send_ack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_close.o(i.closesocket)
</UL>
<P><STRONG><a name="[56]"></a>TCP_Process_create</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tcp.o(i.TCP_Process_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = TCP_Process_create &rArr; RTCS_mem_alloc_zero &rArr; _lwmem_alloc_zero_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_zero_ip_and_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(i.SOCK_STREAM_socket)
</UL>
<P><STRONG><a name="[233]"></a>TCP_Process_data</STRONG> (Thumb, 752 bytes, Stack size 96 bytes, tcp_rcv.o(i.TCP_Process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = TCP_Process_data &rArr; TCP_Setup_receive &rArr; TCP_Test_done_receive &rArr; TCP_Reply_receive &rArr; TCP_Use_ringbuffer &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_system
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Use_ringbuffer
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_to_Rbuffer
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_from_ring
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_memcopy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Truncate_receive_chunks
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Test_done_receive
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Advertise_receive_window
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Advance_receive_user
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reply_receive
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Must_send_ack
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Event
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[231]"></a>TCP_Process_effective_close</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tcp_clos.o(i.TCP_Process_effective_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = TCP_Process_effective_close &rArr; _SOCK_select_signal &rArr; SOCK_select_unblock &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Must_send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_close
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_packet
</UL>

<P><STRONG><a name="[52]"></a>TCP_Process_open</STRONG> (Thumb, 1348 bytes, Stack size 56 bytes, tcp.o(i.TCP_Process_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = TCP_Process_open &rArr; TCP_Start_sending &rArr; TCP_Transmit &rArr; TCP_Send_packet &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_find
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCB_exists_in_system
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Start_sending
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_set_rcvmss
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_set_port
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_is_zero
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_is_multicast
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_and_port_are_equal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_init_no_port
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_ipaddr4
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_copy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sock_stream.o(i.SOCK_STREAM_listen)
<LI> sock_stream.o(i.SOCK_STREAM_connect)
</UL>
<P><STRONG><a name="[23e]"></a>TCP_Process_packet</STRONG> (Thumb, 2348 bytes, Stack size 72 bytes, tcp.o(i.TCP_Process_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = TCP_Process_packet &rArr; TCP_Process_ack &rArr; TCP_Transmit &rArr; TCP_Send_packet &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_next
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCB_exists_in_system
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Update_send_window
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Transmit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Start_sending
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Start_receiving
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_reply_reset
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reply_receive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_release
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_ack
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Must_send_ack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_source
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_dest
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Return_open
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Event
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Clone_tcb
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_start_keepalive_timer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_to_time_wait
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_set_rcvmss
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_set_port
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_is_zero
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_init_no_port
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_ipaddr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Service_packet
</UL>

<P><STRONG><a name="[54]"></a>TCP_Process_receive</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, tcp_rcv.o(i.TCP_Process_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = TCP_Process_receive &rArr; TCP_Setup_receive &rArr; TCP_Test_done_receive &rArr; TCP_Reply_receive &rArr; TCP_Use_ringbuffer &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCB_exists_in_system
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(i.SOCK_STREAM_recv)
</UL>
<P><STRONG><a name="[230]"></a>TCP_Process_release</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tcp_clos.o(i.TCP_Process_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = TCP_Process_release &rArr;  TCP_Process_release (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_release
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Free_TCB
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_close
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_keepalive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_release
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_signal
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_abort
</UL>

<P><STRONG><a name="[55]"></a>TCP_Process_send</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, tcp_send.o(i.TCP_Process_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = TCP_Process_send &rArr; TCP_Transmit &rArr; TCP_Send_packet &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCB_exists_in_system
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_to_ring
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Transmit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(i.SOCK_STREAM_send)
</UL>
<P><STRONG><a name="[244]"></a>TCP_Process_signal</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, tcp.o(i.TCP_Process_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = TCP_Process_signal &rArr; TCP_Transmit &rArr; TCP_Send_packet &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Transmit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_remove
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reply_receive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_release
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Tick_server
</UL>

<P><STRONG><a name="[21b]"></a>TCP_Reply_receive</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, tcp_rcv.o(i.TCP_Reply_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = TCP_Reply_receive &rArr; TCP_Use_ringbuffer &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Use_ringbuffer
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Test_done_receive
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_signal
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[21a]"></a>TCP_Return_open</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, tcp.o(i.TCP_Return_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = TCP_Return_open &rArr; _SOCK_select_signal &rArr; SOCK_select_unblock &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[246]"></a>TCP_Send_IP_packet</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, tcp_send.o(i.TCP_Send_IP_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_find_if
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_find
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_will_fragment
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_PCB
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_reset
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_packet
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_reply_reset
</UL>

<P><STRONG><a name="[a9]"></a>TCP_Send_keepalive</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tcp_send.o(i.TCP_Send_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = TCP_Send_keepalive &rArr; TCP_Transmit &rArr; TCP_Send_packet &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_add
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCB_exists_in_system
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Transmit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_release
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_start_keepalive_timer)
</UL>
<P><STRONG><a name="[247]"></a>TCP_Send_packet</STRONG> (Thumb, 1194 bytes, Stack size 72 bytes, tcp_send.o(i.TCP_Send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = TCP_Send_packet &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_effective_close
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_from_buffer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_time_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_send
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_IP_packet
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Transmit
</UL>

<P><STRONG><a name="[23f]"></a>TCP_Send_reply_reset</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, tcp_send.o(i.TCP_Send_reply_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = TCP_Send_reply_reset &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_send
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_IP_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Service_packet
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[249]"></a>TCP_Send_reset</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, tcp_send.o(i.TCP_Send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = TCP_Send_reset &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_send
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_IP_packet
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_abort
</UL>

<P><STRONG><a name="[5c]"></a>TCP_Service_packet</STRONG> (Thumb, 636 bytes, Stack size 88 bytes, tcp.o(i.TCP_Service_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = TCP_Service_packet &rArr; TCP_Process_packet &rArr; TCP_Process_ack &rArr; TCP_Transmit &rArr; TCP_Send_packet &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_reply_reset
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_source
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_dest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_pseudo
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_PCB
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_is_zero
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_is_multicast
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_are_equal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_init_no_port
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.TCP_Init)
</UL>
<P><STRONG><a name="[21c]"></a>TCP_Setup_receive</STRONG> (Thumb, 522 bytes, Stack size 40 bytes, tcp_rcv.o(i.TCP_Setup_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = TCP_Setup_receive &rArr; TCP_Test_done_receive &rArr; TCP_Reply_receive &rArr; TCP_Use_ringbuffer &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_from_ring
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Truncate_receive_chunks
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Test_done_receive
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Advertise_receive_window
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Advance_receive_user
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reply_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_receive
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_signal
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[240]"></a>TCP_Start_receiving</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcp_rcv.o(i.TCP_Start_receiving))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TCP_Start_receiving &rArr; TCP_Advertise_receive_window &rArr; TCP_Must_send_ack &rArr; TCP_Timer_oneshot_max &rArr; TCP_Timer_start &rArr; RTCS_time_get &rArr; _time_get_elapsed &rArr; _psp_ticks_to_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Advertise_receive_window
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[23d]"></a>TCP_Start_sending</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp_send.o(i.TCP_Start_sending))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = TCP_Start_sending &rArr; TCP_Transmit &rArr; TCP_Send_packet &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_rand
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[236]"></a>TCP_Test_done_receive</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcp_rcv.o(i.TCP_Test_done_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = TCP_Test_done_receive &rArr; TCP_Reply_receive &rArr; TCP_Use_ringbuffer &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reply_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
</UL>

<P><STRONG><a name="[5b]"></a>TCP_Tick_server</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, ticker.o(i.TCP_Tick_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = TCP_Tick_server &rArr; TCP_Process_signal &rArr; TCP_Transmit &rArr; TCP_Send_packet &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_timer_get_interval
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_time_get
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_signal
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_schedule
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_expire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.TCP_Init)
</UL>
<P><STRONG><a name="[24d]"></a>TCP_Timer_advance</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ticker.o(i.TCP_Timer_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = TCP_Timer_advance &rArr;  TCP_Timer_start (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
</UL>

<P><STRONG><a name="[24c]"></a>TCP_Timer_expire</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ticker.o(i.TCP_Timer_expire))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Tick_server
</UL>

<P><STRONG><a name="[225]"></a>TCP_Timer_oneshot_max</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ticker.o(i.TCP_Timer_oneshot_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TCP_Timer_oneshot_max &rArr; TCP_Timer_start &rArr; RTCS_time_get &rArr; _time_get_elapsed &rArr; _psp_ticks_to_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_time_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_stop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Transmit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Must_send_ack
</UL>

<P><STRONG><a name="[245]"></a>TCP_Timer_remove</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ticker.o(i.TCP_Timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TCP_Timer_remove &rArr; RTCS_log_error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_stop
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_oneshot_max
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_signal
</UL>

<P><STRONG><a name="[24b]"></a>TCP_Timer_schedule</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ticker.o(i.TCP_Timer_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TCP_Timer_schedule &rArr; RTCS_log_error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Tick_server
</UL>

<P><STRONG><a name="[229]"></a>TCP_Timer_start</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ticker.o(i.TCP_Timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TCP_Timer_start &rArr; RTCS_time_get &rArr; _time_get_elapsed &rArr; _psp_ticks_to_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_time_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_stop
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_remove
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_schedule
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_expire
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_oneshot_max
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Transmit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_ack
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_signal
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_to_time_wait
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_advance
</UL>

<P><STRONG><a name="[219]"></a>TCP_Timer_stop</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ticker.o(i.TCP_Timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TCP_Timer_stop &rArr; TCP_Timer_remove &rArr; RTCS_log_error
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_oneshot_max
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Transmit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reply_receive
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_ack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
</UL>

<P><STRONG><a name="[22b]"></a>TCP_Transmit</STRONG> (Thumb, 682 bytes, Stack size 64 bytes, tcp_send.o(i.TCP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = TCP_Transmit &rArr; TCP_Send_packet &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_packet
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_stop
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_oneshot_max
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_send
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Start_sending
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_keepalive
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_ack
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_signal
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[223]"></a>TCP_Truncate_receive_chunks</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tcp_rcv.o(i.TCP_Truncate_receive_chunks))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TCP_Truncate_receive_chunks &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Free_TCB
</UL>

<P><STRONG><a name="[241]"></a>TCP_Update_send_window</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, tcp_send.o(i.TCP_Update_send_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TCP_Update_send_window &rArr; RTCS_log_error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[235]"></a>TCP_Use_ringbuffer</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tcp_buf.o(i.TCP_Use_ringbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TCP_Use_ringbuffer &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Advertise_receive_window
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Reply_receive
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
</UL>

<P><STRONG><a name="[24e]"></a>UCB_exists_in_system</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sock_util.o(i.UCB_exists_in_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = UCB_exists_in_system &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_receive
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_process
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_connect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bind
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_close
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_IF
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_receive_expire
</UL>

<P><STRONG><a name="[4b]"></a>UDP_bind</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, udp.o(i.UDP_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = UDP_bind &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCB_exists_in_system
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_set_port
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_is_zero
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_and_port_are_equal
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(i.SOCK_DGRAM_bind)
</UL>
<P><STRONG><a name="[5f]"></a>UDP_close</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, udp.o(i.UDP_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = UDP_close &rArr; _SOCK_select_signal &rArr; SOCK_select_unblock &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCB_exists_in_system
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_release_pending_receive_requests
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_is_zero
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
</UL>
<BR>[Address Reference Count : 2]<UL><LI> udp.o(i.UDP_close_internal)
<LI> sock_close.o(i.closesocket)
</UL>
<P><STRONG><a name="[129]"></a>UDP_close_internal</STRONG> (Thumb, 30 bytes, Stack size 64 bytes, udp.o(i.UDP_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UDP_close_internal &rArr; RTCS_cmd_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOT_close
</UL>

<P><STRONG><a name="[4c]"></a>UDP_connect</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, udp.o(i.UDP_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = UDP_connect &rArr; SOCKADDR_route_find &rArr; IP_route_find &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCB_exists_in_system
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_route_find
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_set_port
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_is_zero
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_is_multicast
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_and_port_are_equal
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(i.SOCK_DGRAM_connect)
</UL>
<P><STRONG><a name="[cc]"></a>UDP_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, udp.o(i.UDP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = UDP_init &rArr; IP_open &rArr; RTCS_mem_alloc &rArr; _lwmem_alloc_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcsinit.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>UDP_open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, udp.o(i.UDP_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = UDP_open &rArr; RTCS_mem_alloc_zero &rArr; _lwmem_alloc_zero_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(i.SOCK_DGRAM_socket)
</UL>
<P><STRONG><a name="[4a]"></a>UDP_process</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, udp.o(i.UDP_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = UDP_process &rArr; _SOCK_select_signal &rArr; SOCK_select_unblock &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_system
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCB_exists_in_system
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_rx_dgram_header_and_data
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_return_req2socket_from_pcb
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_rx_item_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(i.SOCK_DGRAM_bind)
</UL>
<P><STRONG><a name="[4d]"></a>UDP_receive</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, udp.o(i.UDP_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = UDP_receive &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_add
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCB_exists_in_system
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_return_req2socket_from_rx_queue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(i.SOCK_DGRAM_recvfrom)
</UL>
<P><STRONG><a name="[4e]"></a>UDP_send</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, udp.o(i.UDP_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = UDP_send &rArr; UDP_send_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_system
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCB_exists_in_system
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_send
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_append_fragment_autofree
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_append_fragment
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(i.SOCK_DGRAM_sendto)
</UL>
<P><STRONG><a name="[12b]"></a>UDP_send_IF</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, udp.o(i.UDP_send_IF))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = UDP_send_IF &rArr; IP_send_IF &rArr; IP_send_dgram &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCB_exists_in_system
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_PCB
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_IF
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOT_send
</UL>

<P><STRONG><a name="[138]"></a>UDP_send_internal</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, udp.o(i.UDP_send_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = UDP_send_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_find_if
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_find
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCB_exists_in_system
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_will_fragment
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_PCB
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_ipaddr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_send_internal
</UL>

<P><STRONG><a name="[60]"></a>UDP_service</STRONG> (Thumb, 776 bytes, Stack size 80 bytes, udp.o(i.UDP_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = UDP_service &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_next
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_source
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_dest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_pseudo
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_PCB
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_is_multicast
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_and_port_are_equal
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_ipaddr4
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_shrink
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_is_member
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp.o(i.UDP_init)
</UL>
<P><STRONG><a name="[377]"></a>UDP_source</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, udp.o(i.UDP_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UDP_source
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_fromaddr
</UL>

<P><STRONG><a name="[21d]"></a>_SOCK_select_signal</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, sock_select.o(i._SOCK_select_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _SOCK_select_signal &rArr; SOCK_select_unblock &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_ZERO
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fds_signal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_select_unblock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_set_opt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_close
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_effective_close
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_ack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Return_open
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[25d]"></a>__hardfp_modf</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modf
</UL>

<P><STRONG><a name="[71]"></a>_adc_close</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, adc.o(i._adc_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = _adc_close &rArr; _adc_hw_deinit &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_deinit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_channel_deinit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_deinit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_deinit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i._io_adc_install)
</UL>
<P><STRONG><a name="[267]"></a>_adc_hw_channel_deinit</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, adc_kadc.o(i._adc_hw_channel_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _adc_hw_channel_deinit &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_close
</UL>

<P><STRONG><a name="[269]"></a>_adc_hw_channel_init</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, adc_kadc.o(i._adc_hw_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _adc_hw_channel_init &rArr; _bsp_adc_channel_io_init
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_adc_channel_io_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[264]"></a>_adc_hw_deinit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, adc_kadc.o(i._adc_hw_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _adc_hw_deinit &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_close
</UL>

<P><STRONG><a name="[26b]"></a>_adc_hw_init</STRONG> (Thumb, 578 bytes, Stack size 32 bytes, adc_kadc.o(i._adc_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = _adc_hw_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_adc_io_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[2be]"></a>_adc_hw_install</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc_kadc.o(i._adc_hw_install))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
</UL>

<P><STRONG><a name="[26d]"></a>_adc_hw_ioctl</STRONG> (Thumb, 772 bytes, Stack size 48 bytes, adc_kadc.o(i._adc_hw_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _adc_hw_ioctl &rArr; adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_calibration_data
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_data
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_calibration_data
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
</UL>

<P><STRONG><a name="[6e]"></a>_adc_ioctl</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, adc.o(i._adc_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = _adc_ioctl &rArr; _adc_hw_ioctl &rArr; adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_pause
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_ioctl
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_trigger
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_stop
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i._io_adc_install)
</UL>
<P><STRONG><a name="[72]"></a>_adc_open</STRONG> (Thumb, 860 bytes, Stack size 64 bytes, adc.o(i._adc_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = _adc_open &rArr; _adc_ioctl &rArr; _adc_hw_ioctl &rArr; adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_channel_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_channel_deinit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_deinit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i._io_adc_install)
</UL>
<P><STRONG><a name="[70]"></a>_adc_read</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, adc.o(i._adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _adc_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i._io_adc_install)
</UL>
<P><STRONG><a name="[6f]"></a>_adc_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i._adc_write))
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i._io_adc_install)
</UL>
<P><STRONG><a name="[266]"></a>_adt_hw_channel_deinit</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, adt_kpdb.o(i._adt_hw_channel_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _adt_hw_channel_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_close
</UL>

<P><STRONG><a name="[278]"></a>_adt_hw_channel_init</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, adt_kpdb.o(i._adt_hw_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _adt_hw_channel_init &rArr; adt_period_prescaler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt_period_prescaler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[263]"></a>_adt_hw_deinit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adt_kpdb.o(i._adt_hw_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_close
</UL>

<P><STRONG><a name="[276]"></a>_adt_hw_init</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, adt_kpdb.o(i._adt_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = _adt_hw_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[2bf]"></a>_adt_hw_install</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adt_kpdb.o(i._adt_hw_install))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
</UL>

<P><STRONG><a name="[275]"></a>_adt_hw_ioctl</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, adt_kpdb.o(i._adt_hw_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _adt_hw_ioctl &rArr; adt_period_prescaler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt_period_prescaler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
</UL>

<P><STRONG><a name="[273]"></a>_adt_pause</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, adt_kpdb.o(i._adt_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _adt_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
</UL>

<P><STRONG><a name="[27b]"></a>_adt_process_data</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, adt_kpdb.o(i._adt_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _adt_process_data &rArr; _lwevent_set &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_data
</UL>

<P><STRONG><a name="[274]"></a>_adt_resume</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, adt_kpdb.o(i._adt_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _adt_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
</UL>

<P><STRONG><a name="[265]"></a>_adt_stop</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, adt_kpdb.o(i._adt_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _adt_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_close
</UL>

<P><STRONG><a name="[272]"></a>_adt_trigger</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, adt_kpdb.o(i._adt_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _adt_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_ioctl
</UL>

<P><STRONG><a name="[26a]"></a>_bsp_adc_channel_io_init</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, init_gpio.o(i._bsp_adc_channel_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _bsp_adc_channel_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_init
</UL>

<P><STRONG><a name="[26c]"></a>_bsp_adc_io_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_adc_io_init))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_init
</UL>

<P><STRONG><a name="[357]"></a>_bsp_edma_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, edma_kinetis.o(i._bsp_edma_enable))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_reset_module
</UL>

<P><STRONG><a name="[1bb]"></a>_bsp_enet_io_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, init_gpio.o(i._bsp_enet_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _bsp_enet_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_io_init
</UL>

<P><STRONG><a name="[2aa]"></a>_bsp_esdhc_io_init</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, init_gpio.o(i._bsp_esdhc_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _bsp_esdhc_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_set_baudrate
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_init
</UL>

<P><STRONG><a name="[268]"></a>_bsp_get_adc_base_address</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc_mk64.o(i._bsp_get_adc_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_deinit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_set_calibration_data
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_data
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_calibration_data
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibrate
</UL>

<P><STRONG><a name="[2ea]"></a>_bsp_get_clock</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_cm.o(i._bsp_get_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _bsp_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_set_freq
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_find_mclk_freq_div
</UL>

<P><STRONG><a name="[27d]"></a>_bsp_get_clock_configuration</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_cm.o(i._bsp_get_clock_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _bsp_get_clock_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_GetClockConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_set_freq
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_find_mclk_freq_div
</UL>

<P><STRONG><a name="[355]"></a>_bsp_get_edma_done_vectors</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, edma_kinetis.o(i._bsp_get_edma_done_vectors))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_uninstall_isrs
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_install_isrs
</UL>

<P><STRONG><a name="[356]"></a>_bsp_get_edma_error_vectors</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, edma_kinetis.o(i._bsp_get_edma_error_vectors))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_uninstall_isrs
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_install_isrs
</UL>

<P><STRONG><a name="[2ac]"></a>_bsp_get_esdhc_base_address</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, esdhc_mk64.o(i._bsp_get_esdhc_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
</UL>

<P><STRONG><a name="[2ad]"></a>_bsp_get_esdhc_vector</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, esdhc_mk64.o(i._bsp_get_esdhc_vector))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
</UL>

<P><STRONG><a name="[65]"></a>_bsp_get_hwticks</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, init_bsp.o(i._bsp_get_hwticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _bsp_get_hwticks &rArr; hwtimer_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_get_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_bsp.o(i._bsp_pre_init)
</UL>
<P><STRONG><a name="[2e5]"></a>_bsp_get_i2c_base_address</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c_mk64.o(i._bsp_get_i2c_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_init
</UL>

<P><STRONG><a name="[2e4]"></a>_bsp_get_i2c_vector</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c_mk64.o(i._bsp_get_i2c_vector))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_init
</UL>

<P><STRONG><a name="[2f0]"></a>_bsp_get_sai_base_address</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sai_mk64.o(i._bsp_get_sai_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[2f3]"></a>_bsp_get_sai_dma_channel_mask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sai_mk64.o(i._bsp_get_sai_dma_channel_mask))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[301]"></a>_bsp_get_sai_rx_dma_source</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sai_mk64.o(i._bsp_get_sai_rx_dma_source))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[2f7]"></a>_bsp_get_sai_rx_vector</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sai_mk64.o(i._bsp_get_sai_rx_vector))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[2fb]"></a>_bsp_get_sai_tx_dma_source</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sai_mk64.o(i._bsp_get_sai_tx_dma_source))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[2f6]"></a>_bsp_get_sai_tx_vector</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sai_mk64.o(i._bsp_get_sai_tx_vector))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[305]"></a>_bsp_get_serial_base_address</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, serl_mk64.o(i._bsp_get_serial_base_address))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
</UL>

<P><STRONG><a name="[35c]"></a>_bsp_gpio_io_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_gpio_io_init))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[2e6]"></a>_bsp_i2c_io_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, init_gpio.o(i._bsp_i2c_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _bsp_i2c_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_init
</UL>

<P><STRONG><a name="[280]"></a>_bsp_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, init_bsp.o(i._bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = _bsp_init &rArr; _kuart_polled_install &rArr; _io_serial_polled_install &rArr; _io_dev_install &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_install
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_install
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_install
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_default_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_dma_install
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_rtc_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
</UL>

<P><STRONG><a name="[28c]"></a>_bsp_initialize_hardware</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_cm.o(i._bsp_initialize_hardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _bsp_initialize_hardware &rArr; CPU_SetClockConfigGenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_watchdog_disable
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetClockConfigGenMode
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[28e]"></a>_bsp_low_level_init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, bsp_cm.o(i._bsp_low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _bsp_low_level_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[290]"></a>_bsp_osc_autotrim</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_cm.o(i._bsp_osc_autotrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _bsp_osc_autotrim &rArr; CPU_MCGAutoTrim
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_MCGAutoTrim
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[328]"></a>_bsp_post_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inittask.o(i._bsp_post_init))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
</UL>

<P><STRONG><a name="[292]"></a>_bsp_pre_init</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, init_bsp.o(i._bsp_pre_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _bsp_pre_init &rArr; _psp_int_init &rArr; _int_init &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_set_ticks_per_sec
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_set_hwticks_per_tick
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_set_hwtick_function
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_system_pool_id
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool_mapped
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_set_cpu_type
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_start
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_set_freq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_get_modulo
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_deinit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_callback_reg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kinetis_mpu_disable
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_set_vector_table
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_set_clock_configuration
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_osc_autotrim
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_low_level_init
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[283]"></a>_bsp_rtc_io_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_rtc_io_init))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[2f1]"></a>_bsp_sai_io_init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_sai_io_init))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[304]"></a>_bsp_serial_io_init</STRONG> (Thumb, 468 bytes, Stack size 12 bytes, init_gpio.o(i._bsp_serial_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _bsp_serial_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_deinit
</UL>

<P><STRONG><a name="[30b]"></a>_bsp_serial_irda_rx_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_serial_irda_rx_init))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_ioctl
</UL>

<P><STRONG><a name="[30a]"></a>_bsp_serial_irda_tx_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_serial_irda_tx_init))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_ioctl
</UL>

<P><STRONG><a name="[309]"></a>_bsp_serial_rts_init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, init_gpio.o(i._bsp_serial_rts_init))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_ioctl
</UL>

<P><STRONG><a name="[29e]"></a>_bsp_set_clock_configuration</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_cm.o(i._bsp_set_clock_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _bsp_set_clock_configuration &rArr; hwtimer_set_freq &rArr; _bsp_get_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_set_freq
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SetClockConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[64]"></a>_bsp_systimer_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_bsp.o(i._bsp_systimer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _bsp_systimer_callback &rArr; _time_notify_kernel &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_bsp.o(i._bsp_pre_init)
</UL>
<P><STRONG><a name="[28d]"></a>_bsp_watchdog_disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init_hw.o(i._bsp_watchdog_disable))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_initialize_hardware
</UL>

<P><STRONG><a name="[6b]"></a>_esdhc_close</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, esdhc.o(i._esdhc_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _esdhc_close &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[289]"></a>_esdhc_install</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, esdhc.o(i._esdhc_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _esdhc_install &rArr; _io_dev_install_ext &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_default_isr
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_esdhc_vector
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_esdhc_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[68]"></a>_esdhc_ioctl</STRONG> (Thumb, 722 bytes, Stack size 40 bytes, esdhc.o(i._esdhc_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = _esdhc_ioctl &rArr; _esdhc_get_card_type &rArr; _esdhc_send_command &rArr; _lwevent_wait_ticks &rArr; _lwevent_wait_internal &rArr; _time_delay_until &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_wait_while_busy
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_set_baudrate
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_is_running
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_get_card_type
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_get_baudrate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[6c]"></a>_esdhc_open</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, esdhc.o(i._esdhc_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = _esdhc_open &rArr; _esdhc_init &rArr; _esdhc_set_baudrate_low &rArr; _time_delay &rArr; _sched_yield &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[6a]"></a>_esdhc_read</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, esdhc.o(i._esdhc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = _esdhc_read &rArr; _esdhc_send_command &rArr; _lwevent_wait_ticks &rArr; _lwevent_wait_internal &rArr; _time_delay_until &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_ticks
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_get_signalled
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_clear
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[67]"></a>_esdhc_uninstall</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, esdhc.o(i._esdhc_uninstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _esdhc_uninstall &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_default_isr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[69]"></a>_esdhc_write</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, esdhc.o(i._esdhc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = _esdhc_write &rArr; _esdhc_send_command &rArr; _lwevent_wait_ticks &rArr; _lwevent_wait_internal &rArr; _time_delay_until &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_ticks
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_get_signalled
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_clear
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[6d]"></a>_int_default_isr</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, int.o(i._int_default_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _int_default_isr &rArr; _task_set_error_td_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error_td_internal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 3]<UL><LI> int.o(i._int_install_isr)
<LI> int.o(i._int_get_isr)
<LI> int.o(i._int_init)
</UL>
<P><STRONG><a name="[1a7]"></a>_int_disable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, int.o(i._int_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_insert
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_next_block_internal
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_start_preemption
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_dequeue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_poll
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_context_switch_internal
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed_ticks
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_destroy
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_alloc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_set_io_component_handle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_unlink_io_component_handle
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_link_io_component_handle
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwlog_write
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_create_internal
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_internal
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive_internal
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_open_internal
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_add_internal
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_destroy
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_free
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_extend_internal
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_internal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_cleanup
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_alloc_internal
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_deinit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_tx
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_rx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_get_time
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_clear
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_open
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_close
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_send
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_add_buffers_to_rx_ring
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_rx_free_specific
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_rx_free
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_transfer_submit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_request_enable
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_status
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_claim
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_dma_open
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_dma_close
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create_internal
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_open
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_close
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_close
</UL>

<P><STRONG><a name="[1aa]"></a>_int_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, int.o(i._int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_insert
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_next_block_internal
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_start_preemption
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_dequeue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_poll
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_context_switch_internal
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed_ticks
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_destroy
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_alloc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_set_io_component_handle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_unlink_io_component_handle
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_link_io_component_handle
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwlog_write
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_create_internal
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_internal
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive_internal
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_open_internal
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_add_internal
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_free
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_destroy
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_free
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_extend_internal
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_internal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_cleanup
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_alloc_internal
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_channel_deinit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_tx
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_rx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_get_time
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_clear
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_open
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_close
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_send
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_add_buffers_to_rx_ring
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_rx_free_specific
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_rx_free
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_transfer_submit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_request_enable
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_status
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_claim
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_dma_open
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_dma_close
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create_internal
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_open
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_close
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_close
</UL>

<P><STRONG><a name="[2b0]"></a>_int_get_default_isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, int.o(i._int_get_default_isr))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_deinit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_uninstall
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_uninstall_isrs
</UL>

<P><STRONG><a name="[1b7]"></a>_int_get_isr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, int.o(i._int_get_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _int_get_isr &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_isr_start_internal
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_install_isr
</UL>

<P><STRONG><a name="[1b8]"></a>_int_get_isr_data</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, int.o(i._int_get_isr_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _int_get_isr_data &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_isr_start_internal
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_install_isr
</UL>

<P><STRONG><a name="[2bd]"></a>_int_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, int.o(i._int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _int_init &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_init
</UL>

<P><STRONG><a name="[1b9]"></a>_int_install_isr</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, int.o(i._int_install_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_deinit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_deinit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_deinit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_uninstall
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_uninstall_isrs
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_install_isrs
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_install_isr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_uninstall_isr
</UL>

<P><STRONG><a name="[296]"></a>_int_set_vector_table</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, int_vtab.o(i._int_set_vector_table))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[288]"></a>_io_adc_install</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, adc.o(i._io_adc_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _io_adc_install &rArr; _io_dev_install &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_install
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_install
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[2c1]"></a>_io_cvt</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, io_fp.o(i._io_cvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _io_cvt &rArr; modf &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtog
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtof
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtoe
</UL>

<P><STRONG><a name="[2c0]"></a>_io_dev_install</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, io_inst.o(i._io_dev_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = _io_dev_install &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_drvif
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_install
</UL>

<P><STRONG><a name="[2cc]"></a>_io_dev_install_drvif</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, io_instx.o(i._io_dev_install_drvif))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install
</UL>

<P><STRONG><a name="[2af]"></a>_io_dev_install_ext</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, io_instx.o(i._io_dev_install_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = _io_dev_install_ext &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_drvif
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_dma_install
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_install
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_install
</UL>

<P><STRONG><a name="[2cf]"></a>_io_doprint</STRONG> (Thumb, 3174 bytes, Stack size 520 bytes, io_dopr.o(i._io_doprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; modf &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtog
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtof
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtoe
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint_prt64
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint_prt
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_putstr
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_mputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fprintf
</UL>

<P><STRONG><a name="[2d1]"></a>_io_doprint_prt</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, io_dopr.o(i._io_doprint_prt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_doprint_prt
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[2d0]"></a>_io_doprint_prt64</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, io_dopr.o(i._io_doprint_prt64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _io_doprint_prt64 &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[2d9]"></a>_io_dtoa</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, io_fp.o(i._io_dtoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _io_dtoa
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtog
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtoe
</UL>

<P><STRONG><a name="[2d4]"></a>_io_dtoe</STRONG> (Thumb, 238 bytes, Stack size 376 bytes, io_fp.o(i._io_dtoe))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = _io_dtoe &rArr; _io_cvt &rArr; modf &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtoa
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_inf_or_nan
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[2d3]"></a>_io_dtof</STRONG> (Thumb, 282 bytes, Stack size 376 bytes, io_fp.o(i._io_dtof))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = _io_dtof &rArr; _io_cvt &rArr; modf &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_inf_or_nan
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[2d2]"></a>_io_dtog</STRONG> (Thumb, 586 bytes, Stack size 400 bytes, io_fp.o(i._io_dtog))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = _io_dtog &rArr; _io_cvt &rArr; modf &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtoa
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_inf_or_nan
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[2da]"></a>_io_fclose</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, io_fclos.o(i._io_fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _io_fclose &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_task
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_task
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[2db]"></a>_io_fopen</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, io_fopen.o(i._io_fopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _io_fopen &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_task
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_task
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_default_init
</UL>

<P><STRONG><a name="[2dc]"></a>_io_fprintf</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, io_fprt.o(i._io_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = _io_fprintf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; modf &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_task
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_task
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[73]"></a>_io_fputc</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, io_fputc.o(i._io_fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> io_fprt.o(i._io_fprintf)
</UL>
<P><STRONG><a name="[2dd]"></a>_io_fputs</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, io_fputs.o(i._io_fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _io_fputs &rArr; _io_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_write
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_task
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[367]"></a>_io_get_handle</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, io_ghand.o(i._io_get_handle))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_task
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_task
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[78]"></a>_io_i2c_int_close</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, i2c_int.o(i._io_i2c_int_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_i2c_int_close &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int.o(i._io_i2c_int_install)
</UL>
<P><STRONG><a name="[2df]"></a>_io_i2c_int_install</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, i2c_int.o(i._io_i2c_int_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = _io_i2c_int_install &rArr; _io_dev_install_ext &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_install
</UL>

<P><STRONG><a name="[75]"></a>_io_i2c_int_ioctl</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, i2c_int.o(i._io_i2c_int_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_i2c_int_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int.o(i._io_i2c_int_install)
</UL>
<P><STRONG><a name="[79]"></a>_io_i2c_int_open</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, i2c_int.o(i._io_i2c_int_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _io_i2c_int_open &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int.o(i._io_i2c_int_install)
</UL>
<P><STRONG><a name="[77]"></a>_io_i2c_int_read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_int.o(i._io_i2c_int_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_i2c_int_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int.o(i._io_i2c_int_install)
</UL>
<P><STRONG><a name="[74]"></a>_io_i2c_int_uninstall</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, i2c_int.o(i._io_i2c_int_uninstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _io_i2c_int_uninstall &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int.o(i._io_i2c_int_install)
</UL>
<P><STRONG><a name="[76]"></a>_io_i2c_int_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_int.o(i._io_i2c_int_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_i2c_int_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int.o(i._io_i2c_int_install)
</UL>
<P><STRONG><a name="[7e]"></a>_io_i2c_polled_close</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, i2c_pol.o(i._io_i2c_polled_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_i2c_polled_close &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol.o(i._io_i2c_polled_install)
</UL>
<P><STRONG><a name="[2e0]"></a>_io_i2c_polled_install</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, i2c_pol.o(i._io_i2c_polled_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = _io_i2c_polled_install &rArr; _io_dev_install_ext &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_install
</UL>

<P><STRONG><a name="[7b]"></a>_io_i2c_polled_ioctl</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, i2c_pol.o(i._io_i2c_polled_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_i2c_polled_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol.o(i._io_i2c_polled_install)
</UL>
<P><STRONG><a name="[7f]"></a>_io_i2c_polled_open</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, i2c_pol.o(i._io_i2c_polled_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _io_i2c_polled_open &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol.o(i._io_i2c_polled_install)
</UL>
<P><STRONG><a name="[7d]"></a>_io_i2c_polled_read</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_pol.o(i._io_i2c_polled_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_i2c_polled_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol.o(i._io_i2c_polled_install)
</UL>
<P><STRONG><a name="[7a]"></a>_io_i2c_polled_uninstall</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, i2c_pol.o(i._io_i2c_polled_uninstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _io_i2c_polled_uninstall &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol.o(i._io_i2c_polled_install)
</UL>
<P><STRONG><a name="[7c]"></a>_io_i2c_polled_write</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, i2c_pol.o(i._io_i2c_polled_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_i2c_polled_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol.o(i._io_i2c_polled_install)
</UL>
<P><STRONG><a name="[282]"></a>_io_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, io_init.o(i._io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _io_init &rArr; _lwsem_create &rArr; _lwsem_create_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[368]"></a>_io_ioctl</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, io_ioctl.o(i._io_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_task
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[375]"></a>_io_read</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, io_read.o(i._io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_task
</UL>

<P><STRONG><a name="[82]"></a>_io_sai_dma_close</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sai_dma.o(i._io_sai_dma_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_sai_dma_close &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_dma.o(i._io_sai_dma_install)
</UL>
<P><STRONG><a name="[28a]"></a>_io_sai_dma_install</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sai_dma.o(i._io_sai_dma_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _io_sai_dma_install &rArr; _io_dev_install_ext &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[81]"></a>_io_sai_dma_ioctl</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, sai_dma.o(i._io_sai_dma_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_sai_dma_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_dma.o(i._io_sai_dma_install)
</UL>
<P><STRONG><a name="[83]"></a>_io_sai_dma_open</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, sai_dma.o(i._io_sai_dma_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _io_sai_dma_open &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_dma.o(i._io_sai_dma_install)
</UL>
<P><STRONG><a name="[80]"></a>_io_sai_dma_uninstall</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sai_dma.o(i._io_sai_dma_uninstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _io_sai_dma_uninstall &rArr; _lwsem_destroy &rArr; _lwsem_destroy_internal &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_dma.o(i._io_sai_dma_install)
</UL>
<P><STRONG><a name="[28b]"></a>_io_serial_default_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, io_sinit.o(i._io_serial_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _io_serial_default_init &rArr; _io_fopen &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_id_from_name
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[87]"></a>_io_serial_polled_close</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, serl_pol.o(i._io_serial_polled_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _io_serial_polled_close &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol.o(i._io_serial_polled_install)
</UL>
<P><STRONG><a name="[2e3]"></a>_io_serial_polled_install</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, serl_pol.o(i._io_serial_polled_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = _io_serial_polled_install &rArr; _io_dev_install &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_install
</UL>

<P><STRONG><a name="[84]"></a>_io_serial_polled_ioctl</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, serl_pol.o(i._io_serial_polled_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _io_serial_polled_ioctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol.o(i._io_serial_polled_install)
</UL>
<P><STRONG><a name="[88]"></a>_io_serial_polled_open</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, serl_pol.o(i._io_serial_polled_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _io_serial_polled_open &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol.o(i._io_serial_polled_install)
</UL>
<P><STRONG><a name="[86]"></a>_io_serial_polled_read</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, serl_pol.o(i._io_serial_polled_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _io_serial_polled_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol.o(i._io_serial_polled_install)
</UL>
<P><STRONG><a name="[85]"></a>_io_serial_polled_write</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, serl_pol.o(i._io_serial_polled_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _io_serial_polled_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol.o(i._io_serial_polled_install)
</UL>
<P><STRONG><a name="[2de]"></a>_io_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, io_write.o(i._io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _io_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fputs
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_task
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[8d]"></a>_ki2c_int_deinit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, i2c_int_ki2c.o(i._ki2c_int_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _ki2c_int_deinit &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int_ki2c.o(i._ki2c_int_install)
</UL>
<P><STRONG><a name="[8e]"></a>_ki2c_int_init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, i2c_int_ki2c.o(i._ki2c_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = _ki2c_int_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_i2c_vector
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int_ki2c.o(i._ki2c_int_install)
</UL>
<P><STRONG><a name="[287]"></a>_ki2c_int_install</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, i2c_int_ki2c.o(i._ki2c_int_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = _ki2c_int_install &rArr; _io_i2c_int_install &rArr; _io_dev_install_ext &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_install
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[8c]"></a>_ki2c_int_rx</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, i2c_int_ki2c.o(i._ki2c_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _ki2c_int_rx &rArr; _lwsem_wait &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_enable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int_ki2c.o(i._ki2c_int_install)
</UL>
<P><STRONG><a name="[8b]"></a>_ki2c_int_tx</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, i2c_int_ki2c.o(i._ki2c_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _ki2c_int_tx &rArr; _lwsem_wait &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_enable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int_ki2c.o(i._ki2c_int_install)
</UL>
<P><STRONG><a name="[91]"></a>_ki2c_polled_deinit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, i2c_pol_ki2c.o(i._ki2c_polled_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _ki2c_polled_deinit &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol_ki2c.o(i._ki2c_polled_install)
</UL>
<P><STRONG><a name="[92]"></a>_ki2c_polled_init</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, i2c_pol_ki2c.o(i._ki2c_polled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _ki2c_polled_init &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_i2c_io_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_i2c_base_address
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_set_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol_ki2c.o(i._ki2c_polled_install)
</UL>
<P><STRONG><a name="[286]"></a>_ki2c_polled_install</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, i2c_pol_ki2c.o(i._ki2c_polled_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = _ki2c_polled_install &rArr; _io_i2c_polled_install &rArr; _io_dev_install_ext &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_install
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[8a]"></a>_ki2c_polled_ioctl</STRONG> (Thumb, 758 bytes, Stack size 40 bytes, i2c_pol_ki2c.o(i._ki2c_polled_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ki2c_polled_ioctl &rArr; _ki2c_set_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_set_baudrate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> i2c_pol_ki2c.o(i._ki2c_polled_install)
<LI> i2c_int_ki2c.o(i._ki2c_int_install)
</UL>
<P><STRONG><a name="[90]"></a>_ki2c_polled_rx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, i2c_pol_ki2c.o(i._ki2c_polled_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ki2c_polled_rx &rArr; _ki2c_polled_rx_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_rx_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol_ki2c.o(i._ki2c_polled_install)
</UL>
<P><STRONG><a name="[8f]"></a>_ki2c_polled_tx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, i2c_pol_ki2c.o(i._ki2c_polled_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ki2c_polled_tx &rArr; _ki2c_polled_rx_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_rx_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_pol_ki2c.o(i._ki2c_polled_install)
</UL>
<P><STRONG><a name="[2e9]"></a>_ki2s_find_mclk_freq_div</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, sai_dma_ksai.o(i._ki2s_find_mclk_freq_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _ki2s_find_mclk_freq_div &rArr; _bsp_get_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock_configuration
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_hw_init
</UL>

<P><STRONG><a name="[2fa]"></a>_ki2s_set_bclk_mode</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, sai_dma_ksai.o(i._ki2s_set_bclk_mode))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_hw_init
</UL>

<P><STRONG><a name="[2f8]"></a>_ki2s_set_master_mode</STRONG> (Thumb, 374 bytes, Stack size 12 bytes, sai_dma_ksai.o(i._ki2s_set_master_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ki2s_set_master_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[2f9]"></a>_ki2s_set_slave_mode</STRONG> (Thumb, 340 bytes, Stack size 12 bytes, sai_dma_ksai.o(i._ki2s_set_slave_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ki2s_set_slave_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[2a3]"></a>_kinetis_mpu_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kinetis_mpu.o(i._kinetis_mpu_disable))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[10a]"></a>_klog_block_internal</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, klog.o(i._klog_block_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _klog_block_internal &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwlog_write_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_svc_handler
</UL>

<P><STRONG><a name="[10b]"></a>_klog_context_switch_internal</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, klog.o(i._klog_context_switch_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _klog_context_switch_internal &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwlog_write_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_svc
</UL>

<P><STRONG><a name="[10e]"></a>_klog_isr_end_internal</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, klog.o(i._klog_isr_end_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _klog_isr_end_internal &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwlog_write_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_kernel_isr_epilog
</UL>

<P><STRONG><a name="[10d]"></a>_klog_isr_start_internal</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, klog.o(i._klog_isr_start_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _klog_isr_start_internal &rArr; _int_get_isr_data &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwlog_write_internal
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_kernel_isr
</UL>

<P><STRONG><a name="[148]"></a>_klog_log</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, klog.o(i._klog_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwlog_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_start_preemption
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error_td_internal
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_exit_function_internal
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_poll
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_priority
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_blocked_internal
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_destroy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_create
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_alloc
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero_from
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero_from
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_from
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_align
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_from
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive_internal
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_open
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_free
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_create_component
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_destroy
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_alloc_system
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_send
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_component
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_ticks
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_get_signalled
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_clear
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create_internal
</UL>

<P><STRONG><a name="[2ed]"></a>_klog_yield_internal</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, klog.o(i._klog_yield_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _klog_yield_internal &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwlog_write_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
</UL>

<P><STRONG><a name="[e3]"></a>_ksai_dma_deinit</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, sai_dma_ksai.o(i._ksai_dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _ksai_dma_deinit &rArr; _lwsem_destroy &rArr; _lwsem_destroy_internal &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_request_disable
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_release
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_sai.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>_ksai_dma_init</STRONG> (Thumb, 1008 bytes, Stack size 112 bytes, sai_dma_ksai.o(i._ksai_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = _ksai_dma_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_sai_io_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_claim
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_callback_reg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_sai_tx_vector
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_sai_rx_vector
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_sai_dma_channel_mask
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_sai_base_address
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_sai.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>_ksai_dma_ioctl</STRONG> (Thumb, 3666 bytes, Stack size 112 bytes, sai_dma_ksai.o(i._ksai_dma_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _ksai_dma_ioctl &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_submit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tcd_reg2mem
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tcd_mem2reg
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_request_source
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_request_enable
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_status
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_setup
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_sai_tx_dma_source
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_sai_rx_dma_source
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_set_slave_mode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_set_master_mode
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_set_bclk_mode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_find_mclk_freq_div
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init_sai.o(.constdata)
</UL>
<P><STRONG><a name="[2f2]"></a>_ksai_hw_init</STRONG> (Thumb, 616 bytes, Stack size 48 bytes, sai_dma_ksai.o(i._ksai_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _ksai_hw_init &rArr; _ki2s_find_mclk_freq_div &rArr; _bsp_get_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_set_bclk_mode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2s_find_mclk_freq_div
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[95]"></a>_ksai_rx_dma_irq_handler</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, sai_dma_ksai.o(i._ksai_rx_dma_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _ksai_rx_dma_irq_handler &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_dma_ksai.o(i._ksai_dma_init)
</UL>
<P><STRONG><a name="[96]"></a>_ksai_rx_fifoerr_irq_handler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sai_dma_ksai.o(i._ksai_rx_fifoerr_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ksai_rx_fifoerr_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_dma_ksai.o(i._ksai_dma_init)
</UL>
<P><STRONG><a name="[93]"></a>_ksai_tx_dma_irq_handler</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, sai_dma_ksai.o(i._ksai_tx_dma_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _ksai_tx_dma_irq_handler &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_dma_ksai.o(i._ksai_dma_init)
</UL>
<P><STRONG><a name="[94]"></a>_ksai_tx_fifoerr_irq_handler</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sai_dma_ksai.o(i._ksai_tx_fifoerr_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ksai_tx_fifoerr_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sai_dma_ksai.o(i._ksai_dma_init)
</UL>
<P><STRONG><a name="[306]"></a>_kuart_change_baudrate</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, serl_pol_kuart.o(i._kuart_change_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _kuart_change_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_ioctl
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
</UL>

<P><STRONG><a name="[9b]"></a>_kuart_polled_deinit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, serl_pol_kuart.o(i._kuart_polled_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _kuart_polled_deinit &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_serial_io_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol_kuart.o(i._kuart_polled_install)
</UL>
<P><STRONG><a name="[9a]"></a>_kuart_polled_getc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, serl_pol_kuart.o(i._kuart_polled_getc))
<BR>[Address Reference Count : 1]<UL><LI> serl_pol_kuart.o(i._kuart_polled_install)
</UL>
<P><STRONG><a name="[9c]"></a>_kuart_polled_init</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, serl_pol_kuart.o(i._kuart_polled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _kuart_polled_init &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_serial_io_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_serial_base_address
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_change_baudrate
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_peripheral_enable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_peripheral_disable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol_kuart.o(i._kuart_polled_install)
</UL>
<P><STRONG><a name="[285]"></a>_kuart_polled_install</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, serl_pol_kuart.o(i._kuart_polled_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = _kuart_polled_install &rArr; _io_serial_polled_install &rArr; _io_dev_install &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_install
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[97]"></a>_kuart_polled_ioctl</STRONG> (Thumb, 1118 bytes, Stack size 32 bytes, serl_pol_kuart.o(i._kuart_polled_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _kuart_polled_ioctl &rArr; _kuart_change_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_serial_rts_init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_serial_irda_tx_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_serial_irda_rx_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_change_baudrate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol_kuart.o(i._kuart_polled_install)
</UL>
<P><STRONG><a name="[99]"></a>_kuart_polled_putc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serl_pol_kuart.o(i._kuart_polled_putc))
<BR>[Address Reference Count : 1]<UL><LI> serl_pol_kuart.o(i._kuart_polled_install)
</UL>
<P><STRONG><a name="[98]"></a>_kuart_polled_status</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, serl_pol_kuart.o(i._kuart_polled_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _kuart_polled_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serl_pol_kuart.o(i._kuart_polled_install)
</UL>
<P><STRONG><a name="[2b5]"></a>_lwevent_clear</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lwevent.o(i._lwevent_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _lwevent_clear &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_read
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[2ae]"></a>_lwevent_create</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwevent.o(i._lwevent_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _lwevent_create &rArr; _lwevent_create_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
</UL>

<P><STRONG><a name="[30c]"></a>_lwevent_create_internal</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lwevent.o(i._lwevent_create_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _lwevent_create_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create
</UL>

<P><STRONG><a name="[2b1]"></a>_lwevent_destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwevent.o(i._lwevent_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _lwevent_destroy &rArr; _lwevent_destroy_internal &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_uninstall
</UL>

<P><STRONG><a name="[30d]"></a>_lwevent_destroy_internal</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, lwevent.o(i._lwevent_destroy_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = _lwevent_destroy_internal &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_dequeue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy
</UL>

<P><STRONG><a name="[2b7]"></a>_lwevent_get_signalled</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lwevent.o(i._lwevent_get_signalled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _lwevent_get_signalled &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_read
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[27c]"></a>_lwevent_set</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, lwevent.o(i._lwevent_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _lwevent_set &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_isr
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_process_data
</UL>

<P><STRONG><a name="[311]"></a>_lwevent_wait_internal</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lwevent.o(i._lwevent_wait_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = _lwevent_wait_internal &rArr; _time_delay_until &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_block
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_ticks
</UL>

<P><STRONG><a name="[2b6]"></a>_lwevent_wait_ticks</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, lwevent.o(i._lwevent_wait_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _lwevent_wait_ticks &rArr; _lwevent_wait_internal &rArr; _time_delay_until &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_read
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[2ec]"></a>_lwlog_write</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, lwlog.o(i._lwlog_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwlog_write_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
</UL>

<P><STRONG><a name="[2eb]"></a>_lwlog_write_internal</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lwlog.o(i._lwlog_write_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_hwticks
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_isr_start_internal
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_isr_end_internal
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_context_switch_internal
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_block_internal
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwlog_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_yield_internal
</UL>

<P><STRONG><a name="[1e6]"></a>_lwmem_alloc</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lwmem.o(i._lwmem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc
</UL>

<P><STRONG><a name="[317]"></a>_lwmem_alloc_align_internal</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, lwmem.o(i._lwmem_alloc_align_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc_align_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_align
</UL>

<P><STRONG><a name="[294]"></a>_lwmem_alloc_at</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lwmem.o(i._lwmem_alloc_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc_at &rArr; _lwmem_alloc_at_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[318]"></a>_lwmem_alloc_at_internal</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, lwmem.o(i._lwmem_alloc_at_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc_at_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at
</UL>

<P><STRONG><a name="[1e5]"></a>_lwmem_alloc_from</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lwmem.o(i._lwmem_alloc_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc
</UL>

<P><STRONG><a name="[316]"></a>_lwmem_alloc_internal</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, lwmem.o(i._lwmem_alloc_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero_from
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero_from
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_from
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_from
</UL>

<P><STRONG><a name="[1e7]"></a>_lwmem_alloc_system</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lwmem.o(i._lwmem_alloc_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_add_internal
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_system
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_alloc_internal
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_open
</UL>

<P><STRONG><a name="[319]"></a>_lwmem_alloc_system_align</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lwmem.o(i._lwmem_alloc_system_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc_system_align &rArr; _lwmem_alloc_align_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_setup
</UL>

<P><STRONG><a name="[1b2]"></a>_lwmem_alloc_system_from</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lwmem.o(i._lwmem_alloc_system_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc_system_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_system
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
</UL>

<P><STRONG><a name="[13f]"></a>_lwmem_alloc_system_zero</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lwmem.o(i._lwmem_alloc_system_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_system_zero
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_initialize_ex
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_create_component
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_open
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_join
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_dma_install
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_component
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_install
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_install
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_claim
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_install
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_drvif
</UL>

<P><STRONG><a name="[1b1]"></a>_lwmem_alloc_system_zero_from</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lwmem.o(i._lwmem_alloc_system_zero_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc_system_zero_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_system_zero
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
</UL>

<P><STRONG><a name="[1e9]"></a>_lwmem_alloc_zero</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lwmem.o(i._lwmem_alloc_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_float_context
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_init_readyqs
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
</UL>

<P><STRONG><a name="[1e8]"></a>_lwmem_alloc_zero_from</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lwmem.o(i._lwmem_alloc_zero_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _lwmem_alloc_zero_from &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_mem_alloc_zero
</UL>

<P><STRONG><a name="[31a]"></a>_lwmem_create_pool</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lwmem.o(i._lwmem_create_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _lwmem_create_pool &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool_mapped
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_init_internal
</UL>

<P><STRONG><a name="[298]"></a>_lwmem_create_pool_mapped</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lwmem.o(i._lwmem_create_pool_mapped))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _lwmem_create_pool_mapped &rArr; _lwmem_create_pool &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[28]"></a>_lwmem_free</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, lwmem.o(i._lwmem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fclose
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_destroy
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_destroy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_create
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_shutdown
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_initialize_ex
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_receive
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_close
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_release_internal
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_remove
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_add
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_create_component
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_destroy
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_leave
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_close
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_open
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_close
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_adc_install
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Use_ringbuffer
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_to_Rbuffer
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Truncate_receive_chunks
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_data
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_ack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Clone_tcb
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_to_time_wait
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_open
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_close
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Free_TCB
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_free_internal
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_deinit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_deinit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_deinit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_uninstall
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_free_context
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_setup
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_release
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_deinit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_dma_uninstall
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_open
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_close
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_uninstall
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_uninstall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip.o(i.IP_complete_send)
</UL>
<P><STRONG><a name="[1f0]"></a>_lwmem_get_highwater</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwmem.o(i._lwmem_get_highwater))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
</UL>

<P><STRONG><a name="[31b]"></a>_lwmem_get_next_block_internal</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lwmem.o(i._lwmem_get_next_block_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lwmem_get_next_block_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>

<P><STRONG><a name="[297]"></a>_lwmem_get_system_pool_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwmem.o(i._lwmem_get_system_pool_id))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[31c]"></a>_lwmem_init_internal</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwmem.o(i._lwmem_init_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _lwmem_init_internal &rArr; _lwmem_create_pool &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[11e]"></a>_lwmem_set_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwmem.o(i._lwmem_set_type))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_float_context
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_create
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_initialize_ex
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_send
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_create
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_init_readyqs
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_process
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_open
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_add
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_add_internal
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_create_component
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_open
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_join
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_open
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Copy_to_Rbuffer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Setup_receive
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_open
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Clone_tcb
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_component
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_alloc_internal
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_int_install
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_i2c_polled_install
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_install
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_drvif
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_polled_open
</UL>

<P><STRONG><a name="[343]"></a>_lwmem_transfer_internal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwmem.o(i._lwmem_transfer_internal))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>

<P><STRONG><a name="[336]"></a>_lwmem_transfer_td_internal</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwmem.o(i._lwmem_transfer_td_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lwmem_transfer_td_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_float_context
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[141]"></a>_lwsem_create</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwsem.o(i._lwsem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _lwsem_create &rArr; _lwsem_create_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_init_interface
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_initialize_ex
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_dma_install
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_init
</UL>

<P><STRONG><a name="[1c5]"></a>_lwsem_create_hidden</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwsem.o(i._lwsem_create_hidden))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _lwsem_create_hidden &rArr; _lwsem_create_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_create
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_dup
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_construct
</UL>

<P><STRONG><a name="[31d]"></a>_lwsem_create_internal</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, lwsem.o(i._lwsem_create_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _lwsem_create_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_hidden
</UL>

<P><STRONG><a name="[143]"></a>_lwsem_destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwsem.o(i._lwsem_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _lwsem_destroy &rArr; _lwsem_destroy_internal &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_create
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_shutdown
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_init_interface
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_initialize_ex
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_dup
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_destroy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_deinit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_deinit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_sai_dma_uninstall
</UL>

<P><STRONG><a name="[31e]"></a>_lwsem_destroy_internal</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, lwsem.o(i._lwsem_destroy_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = _lwsem_destroy_internal &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_dequeue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
</UL>

<P><STRONG><a name="[1c6]"></a>_lwsem_poll</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lwsem.o(i._lwsem_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _lwsem_poll &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_bind_staticip
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_bind_staticip_internal
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_free_internal
</UL>

<P><STRONG><a name="[13b]"></a>_lwsem_post</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, lwsem.o(i._lwsem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_dequeue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_bind_staticip
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_task
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_task
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_id_from_name
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_bind_staticip_internal
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Get_sock_struct
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Free_sock_struct
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_create_component
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_resume_creator
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_send
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_leave
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_join
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_close
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_depend
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_component
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_isr
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_drvif
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_tx_dma_irq_handler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_rx_dma_irq_handler
</UL>

<P><STRONG><a name="[13a]"></a>_lwsem_wait</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, lwsem.o(i._lwsem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = _lwsem_wait &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_id_from_name
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_create
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Get_sock_struct
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Free_sock_struct
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_create_component
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_send
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_leave
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_join
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_close
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_component
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_tx
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_rx
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_drvif
</UL>

<P><STRONG><a name="[17c]"></a>_mem_sum_ip</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ipsum.o(i._mem_sum_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _mem_sum_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_service
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_pseudo
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_PCB
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_send_report
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
</UL>

<P><STRONG><a name="[320]"></a>_mqx</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, mqx.o(i._mqx))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = _mqx &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_fill_stack_internal
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_start_internal
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_init_readyqs
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_init_internal
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[342]"></a>_mqx_assert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_assert.o(i._mqx_assert))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>

<P><STRONG><a name="[10c]"></a>_mqx_context_switch_internal</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mqx.o(i._mqx_context_switch_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mqx_context_switch_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pend_svc
</UL>

<P><STRONG><a name="[322]"></a>_mqx_exit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mqx.o(i._mqx_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _mqx_exit &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[13e]"></a>_mqx_get_io_component_handle</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mqx.o(i._mqx_get_io_component_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_select_block
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_service
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Get_sock_struct
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Free_sock_struct
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_initialize_ex
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_send
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_receive
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_bind
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_accept
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_process
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_open
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_connect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bind
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_close
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_abort
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_get_ipif_addr
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_service
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_find_if
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_socket_all
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_find
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCB_exists_in_system
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCB_exists_in_system
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Tick_server
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_keepalive
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_open
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_signal
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Clone_tcb
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_is_local
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_is_gate
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_get_netmask
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_MTU
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_send_report
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_service
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_send_error_internal
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_IF
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_linger_timeout_expire
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPLOCAL_service
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPLOCAL_send
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_remove_indirect
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_remove_direct
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_indirect
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_direct
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_multi
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_local
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_IF
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_send
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_complete_recv
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_is_member
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROUTE_new_bindif
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_test
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_multi_test
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_delete_indirect_all
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_route_add_indirect_sort
</UL>

<P><STRONG><a name="[9e]"></a>_mqx_idle_task</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, idletask.o(i._mqx_idle_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mqx_idle_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqx.o(i._mqx_init_kernel_data_internal)
</UL>
<P><STRONG><a name="[321]"></a>_mqx_init_kernel_data_internal</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, mqx.o(i._mqx_init_kernel_data_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _mqx_init_kernel_data_internal &rArr; _mqx_exit &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_set_kernel_disable_level
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[9d]"></a>_mqx_init_task</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, inittask.o(i._mqx_init_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = _mqx_init_task &rArr; _bsp_init &rArr; _kuart_polled_install &rArr; _io_serial_polled_install &rArr; _io_dev_install &rArr; _io_dev_install_drvif &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_post_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqx.o(i._mqx_init_kernel_data_internal)
</UL>
<P><STRONG><a name="[142]"></a>_mqx_link_io_component_handle</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, mqx.o(i._mqx_link_io_component_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _mqx_link_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_initialize_ex
</UL>

<P><STRONG><a name="[293]"></a>_mqx_set_cpu_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mqx.o(i._mqx_set_cpu_type))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[1d6]"></a>_mqx_set_io_component_handle</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mqx.o(i._mqx_set_io_component_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _mqx_set_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
</UL>

<P><STRONG><a name="[14b]"></a>_mqx_unlink_io_component_handle</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, mqx.o(i._mqx_unlink_io_component_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _mqx_unlink_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_shutdown
</UL>

<P><STRONG><a name="[1d0]"></a>_msg_alloc</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, msg.o(i._msg_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_add_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_service
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>

<P><STRONG><a name="[9f]"></a>_msg_cleanup</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, msg.o(i._msg_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _msg_cleanup &rArr; _msg_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msg.o(i._msg_create_component)
</UL>
<P><STRONG><a name="[32a]"></a>_msg_create_component</STRONG> (Thumb, 558 bytes, Stack size 32 bytes, msg.o(i._msg_create_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _msg_create_component &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_create_internal
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_open_internal
</UL>

<P><STRONG><a name="[214]"></a>_msg_free</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, msg.o(i._msg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _msg_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_internal
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_cleanup
</UL>

<P><STRONG><a name="[329]"></a>_msgpool_add_internal</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, msgpool.o(i._msgpool_add_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_alloc
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_create_internal
</UL>

<P><STRONG><a name="[1d8]"></a>_msgpool_create</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, msgpool.o(i._msgpool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = _msgpool_create &rArr; _msgpool_create_internal &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
</UL>

<P><STRONG><a name="[32b]"></a>_msgpool_create_internal</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, msgpool.o(i._msgpool_create_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = _msgpool_create_internal &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_add_internal
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_create_component
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_create
</UL>

<P><STRONG><a name="[1dc]"></a>_msgpool_destroy</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, msgpool.o(i._msgpool_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _msgpool_destroy &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
</UL>

<P><STRONG><a name="[1d7]"></a>_msgq_get_id</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, msgq.o(i._msgq_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _msgq_get_id
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
</UL>

<P><STRONG><a name="[32f]"></a>_msgq_insert_message_internal</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, msgq.o(i._msgq_insert_message_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _msgq_insert_message_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_internal
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive_internal
</UL>

<P><STRONG><a name="[210]"></a>_msgq_open</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, msgq.o(i._msgq_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _msgq_open &rArr; _msgq_open_internal &rArr; _msg_create_component &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_open_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
</UL>

<P><STRONG><a name="[32c]"></a>_msgq_open_internal</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, msgq.o(i._msgq_open_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = _msgq_open_internal &rArr; _msg_create_component &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_create_component
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_open
</UL>

<P><STRONG><a name="[213]"></a>_msgq_receive</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, msgq.o(i._msgq_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _msgq_receive &rArr; _msgq_receive_internal &rArr; _time_delay_until &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_msecs_to_ticks_quick
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
</UL>

<P><STRONG><a name="[32e]"></a>_msgq_receive_internal</STRONG> (Thumb, 724 bytes, Stack size 72 bytes, msgq.o(i._msgq_receive_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _msgq_receive_internal &rArr; _time_delay_until &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_block
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_insert_message_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive
</UL>

<P><STRONG><a name="[1d2]"></a>_msgq_send_blocked_internal</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, msgq.o(i._msgq_send_blocked_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _msgq_send_blocked_internal &rArr; _msgq_send_internal &rArr; _msg_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>

<P><STRONG><a name="[330]"></a>_msgq_send_internal</STRONG> (Thumb, 634 bytes, Stack size 64 bytes, msgq.o(i._msgq_send_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _msgq_send_internal &rArr; _msg_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_block
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_insert_message_internal
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_priority
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_blocked_internal
</UL>

<P><STRONG><a name="[1d3]"></a>_msgq_send_priority</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, msgq.o(i._msgq_send_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _msgq_send_priority &rArr; _msgq_send_internal &rArr; _msg_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_service
</UL>

<P><STRONG><a name="[1bd]"></a>_nvic_int_disable</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, nvic.o(i._nvic_int_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _nvic_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_tx
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_rx
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_isr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_deinit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_uninstall
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_uninstall_isrs
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_uninstall_isr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_mask_interrupts
</UL>

<P><STRONG><a name="[2b8]"></a>_nvic_int_enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nvic.o(i._nvic_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _nvic_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_tx
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_rx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[1ba]"></a>_nvic_int_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nvic.o(i._nvic_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _nvic_int_init &rArr; _nvic_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_enable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_install
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_int_init
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_install_isrs
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_install_isr
</UL>

<P><STRONG><a name="[331]"></a>_partition_alloc_internal</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, partition.o(i._partition_alloc_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_extend_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_alloc_system
</UL>

<P><STRONG><a name="[1ea]"></a>_partition_alloc_system</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, partition.o(i._partition_alloc_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_alloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_create
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc
</UL>

<P><STRONG><a name="[a0]"></a>_partition_cleanup</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, partition.o(i._partition_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _partition_cleanup &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> partition.o(i._partition_create_component)
</UL>
<P><STRONG><a name="[1ec]"></a>_partition_create</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, partition.o(i._partition_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _partition_create &rArr; _partition_create_internal &rArr; _partition_create_component &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_create
</UL>

<P><STRONG><a name="[334]"></a>_partition_create_component</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, partition.o(i._partition_create_component))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _partition_create_component &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_internal
</UL>

<P><STRONG><a name="[333]"></a>_partition_create_internal</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, partition.o(i._partition_create_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _partition_create_internal &rArr; _partition_create_component &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_enqueue
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_component
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create
</UL>

<P><STRONG><a name="[1ed]"></a>_partition_destroy</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, partition.o(i._partition_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _partition_destroy &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_destroy
</UL>

<P><STRONG><a name="[332]"></a>_partition_extend_internal</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, partition.o(i._partition_extend_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _partition_extend_internal &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_alloc_internal
</UL>

<P><STRONG><a name="[1eb]"></a>_partition_free</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, partition.o(i._partition_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _partition_free &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_destroy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_create
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_alloc
</UL>

<P><STRONG><a name="[261]"></a>_psp_add_element_to_array</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, psp_mat3.o(i._psp_add_element_to_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _psp_add_element_to_array
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psp_ticks_to_milliseconds
</UL>

<P><STRONG><a name="[315]"></a>_psp_add_ticks</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, psp_tiad.o(i._psp_add_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _psp_add_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwlog_write_internal
</UL>

<P><STRONG><a name="[335]"></a>_psp_build_float_context</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stack_bu.o(i._psp_build_float_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_transfer_td_internal
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error_td_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_stack_frame
</UL>

<P><STRONG><a name="[337]"></a>_psp_build_stack_frame</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stack_bu.o(i._psp_build_stack_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_float_context
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[344]"></a>_psp_destroy_stack_frame</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stack_de.o(i._psp_destroy_stack_frame))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>

<P><STRONG><a name="[262]"></a>_psp_div_128_by_32</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, psp_mat2.o(i._psp_div_128_by_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psp_ticks_to_milliseconds
</UL>

<P><STRONG><a name="[324]"></a>_psp_init_readyqs</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sc_irdyq.o(i._psp_init_readyqs))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _psp_init_readyqs &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[295]"></a>_psp_int_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, psp_iinit.o(i._psp_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = _psp_int_init &rArr; _int_init &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_install
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[338]"></a>_psp_int_install</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, int_inst.o(i._psp_int_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _psp_int_install
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_init
</UL>

<P><STRONG><a name="[32d]"></a>_psp_msecs_to_ticks_quick</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, psp_mstiq.o(i._psp_msecs_to_ticks_quick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _psp_msecs_to_ticks_quick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive
</UL>

<P><STRONG><a name="[260]"></a>_psp_mul_128_by_32</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, psp_mat1.o(i._psp_mul_128_by_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _psp_mul_128_by_32
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psp_ticks_to_milliseconds
</UL>

<P><STRONG><a name="[34a]"></a>_psp_normalize_ticks</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, psp_tinm.o(i._psp_normalize_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _psp_normalize_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed_ticks
</UL>

<P><STRONG><a name="[327]"></a>_psp_set_kernel_disable_level</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, sc_irdyq.o(i._psp_set_kernel_disable_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _psp_set_kernel_disable_level
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
</UL>

<P><STRONG><a name="[348]"></a>_psp_subtract_ticks</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, psp_tisu.o(i._psp_subtract_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _psp_subtract_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_ticks
</UL>

<P><STRONG><a name="[1be]"></a>_psp_swap2byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psp_supp.o(i._psp_swap2byte))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_rx_bds
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_tx_bds
</UL>

<P><STRONG><a name="[1a9]"></a>_psp_swap4byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psp_supp.o(i._psp_swap4byte))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_send
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_add_buffers_to_rx_ring
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_rx_bds
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_tx_bds
</UL>

<P><STRONG><a name="[33a]"></a>_psp_ticks_to_milliseconds</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, psp_tims.o(i._psp_ticks_to_milliseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _psp_ticks_to_milliseconds &rArr; __psp_ticks_to_milliseconds &rArr; _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__psp_ticks_to_milliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_milliseconds
</UL>

<P><STRONG><a name="[33b]"></a>_psp_ticks_to_time</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, psp_tkti.o(i._psp_ticks_to_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _psp_ticks_to_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed
</UL>

<P><STRONG><a name="[30e]"></a>_queue_dequeue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(i._queue_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _queue_dequeue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
</UL>

<P><STRONG><a name="[2ce]"></a>_queue_enqueue</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, queue.o(i._queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _queue_enqueue &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_internal
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dev_install_drvif
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create_internal
</UL>

<P><STRONG><a name="[2e1]"></a>_queue_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, queue.o(i._queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_create_pool
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create_component
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_create_internal
</UL>

<P><STRONG><a name="[33c]"></a>_queue_insert</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, queue.o(i._queue_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
</UL>

<P><STRONG><a name="[284]"></a>_rtc_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, krtc.o(i._rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = _rtc_init &rArr; _time_delay &rArr; _sched_yield &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[149]"></a>_sched_yield</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sched.o(i._sched_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _sched_yield &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_yield_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_send
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_wait_while_busy
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[33d]"></a>_task_alloc_td_internal</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, task.o(i._task_alloc_td_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _task_alloc_td_internal &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_insert
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_set_type
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_zero
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[33e]"></a>_task_build_internal</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, task.o(i._task_build_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = _task_build_internal &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
</UL>

<P><STRONG><a name="[1f1]"></a>_task_check_stack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task.o(i._task_check_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _task_check_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
</UL>

<P><STRONG><a name="[1f9]"></a>_task_create</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, task.o(i._task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = _task_create &rArr; _task_create_internal &rArr; _task_build_internal &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_create
</UL>

<P><STRONG><a name="[33f]"></a>_task_create_internal</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, task.o(i._task_create_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = _task_create_internal &rArr; _task_build_internal &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create
</UL>

<P><STRONG><a name="[340]"></a>_task_destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task.o(i._task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _task_destroy &rArr; _task_destroy_internal &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_exit_function_internal
</UL>

<P><STRONG><a name="[341]"></a>_task_destroy_internal</STRONG> (Thumb, 754 bytes, Stack size 48 bytes, task.o(i._task_destroy_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = _task_destroy_internal &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_destroy_stack_frame
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_assert
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_transfer_internal
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_get_next_block_internal
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_run_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy
</UL>

<P><STRONG><a name="[a1]"></a>_task_exit_function_internal</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, task.o(i._task_exit_function_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _task_exit_function_internal &rArr; _task_destroy &rArr; _task_destroy_internal &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_bu.o(i._psp_build_stack_frame)
</UL>
<P><STRONG><a name="[323]"></a>_task_fill_stack_internal</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task.o(i._task_fill_stack_internal))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[1ce]"></a>_task_get_error</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task.o(i._task_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
</UL>

<P><STRONG><a name="[1ef]"></a>_task_get_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task.o(i._task_get_id))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
</UL>

<P><STRONG><a name="[2e2]"></a>_task_get_id_from_name</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, task.o(i._task_get_id_from_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = _task_get_id_from_name &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_default_init
</UL>

<P><STRONG><a name="[1d1]"></a>_task_get_id_from_td</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, task.o(i._task_get_id_from_td))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>

<P><STRONG><a name="[1cc]"></a>_task_get_td</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, task.o(i._task_get_td))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _task_get_td &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_socket
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_template_ptr
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_task
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_accept
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_serial_default_init
</UL>

<P><STRONG><a name="[1f8]"></a>_task_get_template_ptr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, task.o(i._task_get_template_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _task_get_template_ptr &rArr; _task_get_td &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task
</UL>

<P><STRONG><a name="[325]"></a>_task_init_internal</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, task.o(i._task_init_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_stack_frame
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_transfer_td_internal
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_fill_stack_internal
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>

<P><STRONG><a name="[1cd]"></a>_task_ready</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, task.o(i._task_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
</UL>

<P><STRONG><a name="[30f]"></a>_task_ready_internal</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, task.o(i._task_ready_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_internal
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_destroy_internal
</UL>

<P><STRONG><a name="[1cf]"></a>_task_set_error</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, task.o(i._task_set_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_internal
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_priority
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_alloc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_set_io_component_handle
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_unlink_io_component_handle
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_link_io_component_handle
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_set_errno
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_internal
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_at_internal
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_align_internal
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgpool_create_internal
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_send_internal
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive_internal
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_open_internal
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msg_free
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_task_exit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_create
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_alloc_internal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_deinit
</UL>

<P><STRONG><a name="[2bb]"></a>_task_set_error_td_internal</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, task.o(i._task_set_error_td_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _task_set_error_td_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_float_context
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
</UL>

<P><STRONG><a name="[205]"></a>_task_start_preemption</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, task.o(i._task_start_preemption))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = _task_start_preemption &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_recv
</UL>

<P><STRONG><a name="[204]"></a>_task_stop_preemption</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, task.o(i._task_stop_preemption))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _task_stop_preemption &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_recv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_task
</UL>

<P><STRONG><a name="[1b0]"></a>_time_delay</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, time.o(i._time_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = _time_delay &rArr; _sched_yield &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_msecs_to_ticks_quick
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_task
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_task
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_if_probe_and_bind
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_set_baudrate_low
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_get_card_type
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_initialize
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_ksz8081_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_read_write_mii
</UL>

<P><STRONG><a name="[313]"></a>_time_delay_for</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, time.o(i._time_delay_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _time_delay_for &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive_internal
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
</UL>

<P><STRONG><a name="[346]"></a>_time_delay_internal</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, time.o(i._time_delay_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _time_delay_internal &rArr; _queue_insert &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_insert
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
</UL>

<P><STRONG><a name="[312]"></a>_time_delay_until</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, time.o(i._time_delay_until))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _time_delay_until &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_log
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msgq_receive_internal
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_internal
</UL>

<P><STRONG><a name="[2ba]"></a>_time_diff_milliseconds</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, time.o(i._time_diff_milliseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _time_diff_milliseconds &rArr; _psp_ticks_to_milliseconds &rArr; __psp_ticks_to_milliseconds &rArr; _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_ticks_to_milliseconds
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_wait_while_busy
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[347]"></a>_time_diff_ticks</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, time.o(i._time_diff_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _time_diff_ticks &rArr; _psp_subtract_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_subtract_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_milliseconds
</UL>

<P><STRONG><a name="[1fd]"></a>_time_get_elapsed</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, time.o(i._time_get_elapsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _time_get_elapsed &rArr; _psp_ticks_to_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_ticks_to_time
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_time_get
</UL>

<P><STRONG><a name="[349]"></a>_time_get_elapsed_ticks</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, time.o(i._time_get_elapsed_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _time_get_elapsed_ticks &rArr; _psp_normalize_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed
</UL>

<P><STRONG><a name="[314]"></a>_time_get_hwticks</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, time.o(i._time_get_hwticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _time_get_hwticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwlog_write_internal
</UL>

<P><STRONG><a name="[224]"></a>_time_get_resolution</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, time.o(i._time_get_resolution))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_RTT_measure
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_ack
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Init
</UL>

<P><STRONG><a name="[2b9]"></a>_time_get_ticks</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, time.o(i._time_get_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _time_get_ticks &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_wait_while_busy
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>

<P><STRONG><a name="[2a4]"></a>_time_notify_kernel</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, time.o(i._time_notify_kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _time_notify_kernel &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_systimer_callback
</UL>

<P><STRONG><a name="[2a2]"></a>_time_set_hwtick_function</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, time.o(i._time_set_hwtick_function))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[2a1]"></a>_time_set_hwticks_per_tick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, time.o(i._time_set_hwticks_per_tick))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[29f]"></a>_time_set_ticks_per_sec</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, time.o(i._time_set_ticks_per_sec))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[34b]"></a>accept</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sock.o(i.accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = accept &rArr; SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_PROTOCOL_exists_in_system
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_setsockerror
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[34c]"></a>adc_process_all_data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, adc_kadc.o(i.adc_process_all_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = adc_process_all_data &rArr; adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_data
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adt_idelay_isr
</UL>

<P><STRONG><a name="[34d]"></a>bind</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sock.o(i.bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bind &rArr; SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_PROTOCOL_exists_in_system
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_check_valid
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_check_addr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_setsockerror
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1f4]"></a>closesocket</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, sock_close.o(i.closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = closesocket &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_start_preemption
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Free_sock_struct
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_shutdown
</UL>

<P><STRONG><a name="[2f5]"></a>dma_callback_reg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dma.o(i.dma_callback_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_callback_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[2f4]"></a>dma_channel_claim</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dma.o(i.dma_channel_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_channel_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_init
</UL>

<P><STRONG><a name="[2ef]"></a>dma_channel_release</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(i.dma_channel_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_channel_release
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_deinit
</UL>

<P><STRONG><a name="[2fc]"></a>dma_channel_setup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dma.o(i.dma_channel_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[303]"></a>dma_channel_status</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dma.o(i.dma_channel_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_channel_status
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[350]"></a>dma_deinit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dma.o(i.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
</UL>

<P><STRONG><a name="[281]"></a>dma_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dma.o(i.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dma_init &rArr; dma_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_init
</UL>

<P><STRONG><a name="[2ee]"></a>dma_request_disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(i.dma_request_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_request_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_deinit
</UL>

<P><STRONG><a name="[300]"></a>dma_request_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(i.dma_request_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_request_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[2fd]"></a>dma_request_source</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dma.o(i.dma_request_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_request_source
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[2fe]"></a>dma_tcd_mem2reg</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, dma.o(i.dma_tcd_mem2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = dma_tcd_mem2reg &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[302]"></a>dma_tcd_reg2mem</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, dma.o(i.dma_tcd_reg2mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = dma_tcd_reg2mem &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[2ff]"></a>dma_transfer_submit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dma.o(i.dma_transfer_submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_transfer_submit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ksai_dma_ioctl
</UL>

<P><STRONG><a name="[29c]"></a>hwtimer_callback_reg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hwtimer.o(i.hwtimer_callback_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hwtimer_callback_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[29b]"></a>hwtimer_deinit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hwtimer.o(i.hwtimer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwtimer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[2a0]"></a>hwtimer_get_modulo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hwtimer.o(i.hwtimer_get_modulo))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[27f]"></a>hwtimer_get_time</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hwtimer.o(i.hwtimer_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwtimer_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_hwticks
</UL>

<P><STRONG><a name="[299]"></a>hwtimer_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hwtimer.o(i.hwtimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hwtimer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[29a]"></a>hwtimer_set_freq</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, hwtimer.o(i.hwtimer_set_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hwtimer_set_freq &rArr; _bsp_get_clock
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock_configuration
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_set_clock_configuration
</UL>

<P><STRONG><a name="[29d]"></a>hwtimer_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hwtimer.o(i.hwtimer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hwtimer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_pre_init
</UL>

<P><STRONG><a name="[35b]"></a>init_hardware</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, init_hw.o(i.init_hardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = init_hardware &rArr; _bsp_initialize_hardware &rArr; CPU_SetClockConfigGenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_initialize_hardware
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_gpio_io_init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_flexbus_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toolchain_startup
</UL>

<P><STRONG><a name="[45]"></a>ip_if_del_dns_addr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ip_if.o(i.ip_if_del_dns_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ip_if_del_dns_addr &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcs_if.o(i.RTCS_if_del_dns_addr)
</UL>
<P><STRONG><a name="[15b]"></a>ip_if_is_joined</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ip_if.o(i.ip_if_is_joined))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_if_is_joined
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICMP_service
</UL>

<P><STRONG><a name="[365]"></a>ipcfg_add_interface</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ipcfg.o(i.ipcfg_add_interface))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_init_interface
</UL>

<P><STRONG><a name="[35f]"></a>ipcfg_bind_staticip</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ipcfg.o(i.ipcfg_bind_staticip))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = ipcfg_bind_staticip &rArr; ipcfg_bind_staticip_internal &rArr; ipcfg_unbind_internal_actual &rArr; ipcfg_del_dns_ip &rArr; RTCS_if_del_dns_addr &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_poll
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_bind_staticip_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[362]"></a>ipcfg_del_dns_ip</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ipcfg.o(i.ipcfg_del_dns_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ipcfg_del_dns_ip &rArr; RTCS_if_del_dns_addr &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_if_del_dns_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_unbind_internal_actual
</UL>

<P><STRONG><a name="[363]"></a>ipcfg_init_device</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ipcfg.o(i.ipcfg_init_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = ipcfg_init_device &rArr; RTCS_if_add &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_if_remove
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_if_add
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_shutdown
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_initialize
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_init_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[364]"></a>ipcfg_init_interface</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, ipcfg.o(i.ipcfg_init_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = ipcfg_init_interface &rArr; _lwsem_destroy &rArr; _lwsem_destroy_internal &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_add_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_init_device
</UL>

<P><STRONG><a name="[366]"></a>listen</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sock.o(i.listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = listen &rArr; SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_PROTOCOL_exists_in_system
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_setsockerror
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[f3]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mqx_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = main &rArr; _mqx &rArr; _task_init_internal &rArr; _psp_build_stack_frame &rArr; _psp_build_float_context &rArr; _lwmem_alloc_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[aa]"></a>main_task</STRONG> (Thumb, 2090 bytes, Stack size 144 bytes, demo.o(i.main_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = main_task &rArr; _io_fprintf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; modf &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_init_device
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_bind_staticip
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_error
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_block
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_write
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_ioctl
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_get_handle
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fputs
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fprintf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fclose
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_socket
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_shutdown
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_geterror
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_create
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_ZERO
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_SET
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_ISSET
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo.o(.constdata)
</UL>
<P><STRONG><a name="[2c3]"></a>modf</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, modf.o(i.modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = modf &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[36a]"></a>recv</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sock.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = recv &rArr; SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_disallow_recv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_PROTOCOL_exists_in_system
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_setsockerror
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_task
</UL>

<P><STRONG><a name="[ab]"></a>rx_task</STRONG> (Thumb, 98 bytes, Stack size 128 bytes, demo.o(i.rx_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = rx_task &rArr; _io_fprintf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; modf &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_block
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_write
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_get_handle
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fprintf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fclose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>select</STRONG> (Thumb, 98 bytes, Stack size 88 bytes, sock_select.o(i.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = select &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_send
</UL>

<P><STRONG><a name="[369]"></a>send</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sock.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send &rArr; SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_disallow_send
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_PROTOCOL_exists_in_system
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_setsockerror
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_task
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[1f3]"></a>setsockopt</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, sock_options.o(i.setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = setsockopt &rArr; setsockopt_cmd_issue &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockopt_common_prologue
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt_cmd_issue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_shutdown
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[35a]"></a>systick_get_vector</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hwtimer_kinetis.o(i.systick_get_vector))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_systick_deinit
</UL>

<P><STRONG><a name="[eb]"></a>toolchain_startup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, comp.o(i.toolchain_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = toolchain_startup &rArr; init_hardware &rArr; _bsp_initialize_hardware &rArr; CPU_SetClockConfigGenMode
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__boot
</UL>

<P><STRONG><a name="[ac]"></a>tx_task</STRONG> (Thumb, 158 bytes, Stack size 160 bytes, demo.o(i.tx_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = tx_task &rArr; _io_fprintf &rArr; _io_doprint &rArr; _io_dtog &rArr; _io_cvt &rArr; modf &rArr; __hardfp_modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_block
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_read
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_ioctl
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_get_handle
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fputs
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fprintf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fopen
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_fclose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo.o(.constdata)
</UL>
<P><STRONG><a name="[2c2]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[3c6]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[3c7]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[3c8]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[3c9]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[3ca]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[2c6]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[378]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[37e]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[2c5]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[37c]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2c4]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[37d]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[2cb]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[37f]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2c8]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[380]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2ca]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[381]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[384]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[2c7]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[382]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[37b]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[37a]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[2c9]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_cvt
</UL>

<P><STRONG><a name="[383]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[25e]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
</UL>

<P><STRONG><a name="[385]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ed]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[3cb]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3cc]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[13]"></a>_int_kernel_isr_epilog</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _int_kernel_isr_epilog &rArr; _klog_isr_end_internal &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_klog_isr_end_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatch.o(KERNEL)
</UL>
<P><STRONG><a name="[360]"></a>ipcfg_bind_staticip_internal</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ipcfg.o(i.ipcfg_bind_staticip_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = ipcfg_bind_staticip_internal &rArr; ipcfg_unbind_internal_actual &rArr; ipcfg_del_dns_ip &rArr; RTCS_if_del_dns_addr &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_poll
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_unbind_internal_actual
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_if_probe_and_bind
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_gate_add
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_bind_staticip
</UL>

<P><STRONG><a name="[361]"></a>ipcfg_unbind_internal_actual</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, ipcfg.o(i.ipcfg_unbind_internal_actual))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = ipcfg_unbind_internal_actual &rArr; ipcfg_del_dns_ip &rArr; RTCS_if_del_dns_addr &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_if_unbind
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_gate_remove
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_release
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_del_dns_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipcfg_bind_staticip_internal
</UL>

<P><STRONG><a name="[36e]"></a>setsockopt_cmd_issue</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, sock_options.o(i.setsockopt_cmd_issue))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = setsockopt_cmd_issue &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[a8]"></a>setsockopt_internal</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sock_options.o(i.setsockopt_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = setsockopt_internal &rArr; socket_set_opt &rArr; _SOCK_select_signal &rArr; SOCK_select_unblock &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_opt
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_opt
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_set_opt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_options.o(i.setsockopt_cmd_issue)
</UL>
<P><STRONG><a name="[36f]"></a>socket_set_opt</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sock_options.o(i.socket_set_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = socket_set_opt &rArr; _SOCK_select_signal &rArr; SOCK_select_unblock &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt_internal
</UL>

<P><STRONG><a name="[374]"></a>sockopt_check_level</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sock_options.o(i.sockopt_check_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sockopt_check_level
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockopt_common_prologue
</UL>

<P><STRONG><a name="[373]"></a>sockopt_check_option</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sock_options.o(i.sockopt_check_option))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockopt_common_prologue
</UL>

<P><STRONG><a name="[36d]"></a>sockopt_common_prologue</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, sock_options.o(i.sockopt_common_prologue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sockopt_common_prologue &rArr; SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockopt_check_option
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockopt_check_level
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_check_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[370]"></a>tcp_set_opt</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, sock_options.o(i.tcp_set_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_set_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt_internal
</UL>

<P><STRONG><a name="[371]"></a>udp_set_opt</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, sock_options.o(i.udp_set_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udp_set_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt_internal
</UL>

<P><STRONG><a name="[208]"></a>SOCK_correct_fds</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sock_select.o(i.SOCK_correct_fds))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SOCK_correct_fds &rArr; sock_fds_check &rArr; SOCK_exists_in_system &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fds_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_poll_fds
</UL>

<P><STRONG><a name="[a7]"></a>SOCK_poll_fds</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, sock_select.o(i.SOCK_poll_fds))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = SOCK_poll_fds &rArr; SOCK_correct_fds &rArr; sock_fds_check &rArr; SOCK_exists_in_system &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_ZERO
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fds_poll
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_select_block
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_correct_fds
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_select.o(i.select)
</UL>
<P><STRONG><a name="[372]"></a>SOCK_select_activity</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, sock_select.o(i.SOCK_select_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SOCK_select_activity
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fds_poll
</UL>

<P><STRONG><a name="[20c]"></a>SOCK_select_block</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sock_select.o(i.SOCK_select_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SOCK_select_block &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_poll_fds
</UL>

<P><STRONG><a name="[57]"></a>SOCK_select_expire</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sock_select.o(i.SOCK_select_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SOCK_select_expire &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_ZERO
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_select.o(i.SOCK_select_block)
</UL>
<P><STRONG><a name="[20d]"></a>SOCK_select_unblock</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sock_select.o(i.SOCK_select_unblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SOCK_select_unblock &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
</UL>

<P><STRONG><a name="[209]"></a>sock_fds_check</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sock_select.o(i.sock_fds_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sock_fds_check &rArr; SOCK_exists_in_system &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_exists_in_system
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_CLR
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_correct_fds
</UL>

<P><STRONG><a name="[20b]"></a>sock_fds_poll</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, sock_select.o(i.sock_fds_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sock_fds_poll &rArr; RTCS_FD_SET &rArr; SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_ZERO
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_SET
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_select_activity
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_poll_fds
</UL>

<P><STRONG><a name="[25c]"></a>sock_fds_signal</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sock_select.o(i.sock_fds_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sock_fds_signal &rArr; RTCS_FD_SET &rArr; SOCK_check_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_ZERO
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SOCK_select_signal
</UL>

<P><STRONG><a name="[1ee]"></a>RTCS_set_errno</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sock_stream.o(i.RTCS_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = RTCS_set_errno &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_accept
</UL>

<P><STRONG><a name="[202]"></a>SOCKADDR_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sock_stream.o(i.SOCKADDR_copy))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_connect
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_bind
</UL>

<P><STRONG><a name="[203]"></a>SOCKADDR_get_if_scope_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sock_stream.o(i.SOCKADDR_get_if_scope_id))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_listen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_connect
</UL>

<P><STRONG><a name="[b1]"></a>SOCK_STREAM_accept</STRONG> (Thumb, 344 bytes, Stack size 96 bytes, sock_stream.o(i.SOCK_STREAM_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = SOCK_STREAM_accept &rArr; SOCK_Get_sock_struct &rArr; RTCS_part_alloc_zero &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Get_sock_struct
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_Free_sock_struct
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_setsockerror
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_getpeername
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_set_errno
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>SOCK_STREAM_bind</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, sock_stream.o(i.SOCK_STREAM_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = SOCK_STREAM_bind &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>SOCK_STREAM_connect</STRONG> (Thumb, 278 bytes, Stack size 168 bytes, sock_stream.o(i.SOCK_STREAM_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = SOCK_STREAM_connect &rArr; SOCK_STREAM_bind &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_bind
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_if_scope_id
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>SOCK_STREAM_getpeername</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sock_stream.o(i.SOCK_STREAM_getpeername))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SOCK_STREAM_getpeername &rArr; SOCKADDR_return_addr &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_return_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_STREAM_accept
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>SOCK_STREAM_getsockname</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sock_stream.o(i.SOCK_STREAM_getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SOCK_STREAM_getsockname &rArr; SOCKADDR_return_addr &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_return_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>SOCK_STREAM_listen</STRONG> (Thumb, 258 bytes, Stack size 152 bytes, sock_stream.o(i.SOCK_STREAM_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = SOCK_STREAM_listen &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_if_scope_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>SOCK_STREAM_recv</STRONG> (Thumb, 212 bytes, Stack size 96 bytes, sock_stream.o(i.SOCK_STREAM_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = SOCK_STREAM_recv &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_start_preemption
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_setsockerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>SOCK_STREAM_send</STRONG> (Thumb, 272 bytes, Stack size 136 bytes, sock_stream.o(i.SOCK_STREAM_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = SOCK_STREAM_send &rArr; select &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_ZERO
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_FD_SET
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_setsockerror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>SOCK_STREAM_socket</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, sock_stream.o(i.SOCK_STREAM_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = SOCK_STREAM_socket &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>sock_stream_change_backlog</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sock_stream.o(i.sock_stream_change_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = sock_stream_change_backlog &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_stream.o(i.SOCK_STREAM_listen)
</UL>
<P><STRONG><a name="[25f]"></a>__psp_ticks_to_milliseconds</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, psp_tims.o(i.__psp_ticks_to_milliseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __psp_ticks_to_milliseconds &rArr; _psp_div_128_by_32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_element_to_array
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_mul_128_by_32
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_div_128_by_32
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_ticks_to_milliseconds
</UL>

<P><STRONG><a name="[2d5]"></a>_io_mputc</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, io_dopr.o(i._io_mputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_mputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[2d6]"></a>_io_putstr</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, io_dopr.o(i._io_putstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _io_putstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_doprint
</UL>

<P><STRONG><a name="[b7]"></a>SOCK_DGRAM_bind</STRONG> (Thumb, 80 bytes, Stack size 88 bytes, sock_dgram.o(i.SOCK_DGRAM_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = SOCK_DGRAM_bind &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_sendto
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>SOCK_DGRAM_connect</STRONG> (Thumb, 120 bytes, Stack size 96 bytes, sock_dgram.o(i.SOCK_DGRAM_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = SOCK_DGRAM_connect &rArr; SOCK_DGRAM_bind &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_bind
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>SOCK_DGRAM_getpeername</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sock_dgram.o(i.SOCK_DGRAM_getpeername))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SOCK_DGRAM_getpeername &rArr; SOCKADDR_return_addr &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_return_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>SOCK_DGRAM_getsockname</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sock_dgram.o(i.SOCK_DGRAM_getsockname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SOCK_DGRAM_getsockname &rArr; SOCKADDR_return_addr &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_return_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>SOCK_DGRAM_recv</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sock_dgram.o(i.SOCK_DGRAM_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = SOCK_DGRAM_recv &rArr; SOCK_DGRAM_recvfrom &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>SOCK_DGRAM_recvfrom</STRONG> (Thumb, 130 bytes, Stack size 96 bytes, sock_dgram.o(i.SOCK_DGRAM_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = SOCK_DGRAM_recvfrom &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_setsockerror
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_return_addr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>SOCK_DGRAM_send</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, sock_dgram.o(i.SOCK_DGRAM_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = SOCK_DGRAM_send &rArr; SOCK_DGRAM_sendto &rArr; SOCK_DGRAM_bind &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>SOCK_DGRAM_sendto</STRONG> (Thumb, 184 bytes, Stack size 112 bytes, sock_dgram.o(i.SOCK_DGRAM_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = SOCK_DGRAM_sendto &rArr; SOCK_DGRAM_bind &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_setsockerror
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_getpeername
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_bind
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCK_DGRAM_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>SOCK_DGRAM_socket</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, sock_dgram.o(i.SOCK_DGRAM_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = SOCK_DGRAM_socket &rArr; RTCS_cmd_issue &rArr; _msg_alloc &rArr; _msgpool_add_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_issue
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sock_dgram.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>IGMP_getopt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, soigmp.o(i.IGMP_getopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = IGMP_getopt &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_get_membership
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soigmp.o(i.SOL_IGMP_getsockopt)
</UL>
<P><STRONG><a name="[16c]"></a>IGMP_join_socket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, soigmp.o(i.IGMP_join_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = IGMP_join_socket &rArr; IGMP_member_create &rArr; RTCS_part_alloc_zero &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_find
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_create
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_group
</UL>

<P><STRONG><a name="[16e]"></a>IGMP_leave_socket</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, soigmp.o(i.IGMP_leave_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IGMP_leave_socket &rArr; IGMP_member_delete &rArr; RTCS_part_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_find
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_group
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_group
</UL>

<P><STRONG><a name="[168]"></a>IGMP_leave_socket_all</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, soigmp.o(i.IGMP_leave_socket_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = IGMP_leave_socket_all &rArr; IGMP_leave_group &rArr; IGMP_leave_if &rArr; IP_find_if &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_find
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_group
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_ipif_unbind
</UL>

<P><STRONG><a name="[59]"></a>IGMP_setopt</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, soigmp.o(i.IGMP_setopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = IGMP_setopt &rArr; IGMP_leave_group &rArr; IGMP_leave_if &rArr; IP_find_if &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_leave_group
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_join_group
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soigmp.o(i.SOL_IGMP_setsockopt)
</UL>
<P><STRONG><a name="[49]"></a>RTCS_task</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rtcstask.o(i.RTCS_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTCS_task &rArr; _task_get_template_ptr &rArr; _task_get_td &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_template_ptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcstask.o(i.RTCS_task_create)
</UL>
<P><STRONG><a name="[27]"></a>IP_MTU_test</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, iputil.o(i.IP_MTU_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IP_MTU_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iputil.o(i.IP_MTU)
</UL>
<P><STRONG><a name="[2a]"></a>IP_find_if_test</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iputil.o(i.IP_find_if_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IP_find_if_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iputil.o(i.IP_find_if)
</UL>
<P><STRONG><a name="[2b]"></a>IP_get_ipif_addr_test</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, iputil.o(i.IP_get_ipif_addr_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IP_get_ipif_addr_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iputil.o(i.IP_get_ipif_addr)
</UL>
<P><STRONG><a name="[2c]"></a>IP_get_netmask_test</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, iputil.o(i.IP_get_netmask_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IP_get_netmask_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iputil.o(i.IP_get_netmask)
</UL>
<P><STRONG><a name="[2d]"></a>IP_is_gate_test</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, iputil.o(i.IP_is_gate_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IP_is_gate_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iputil.o(i.IP_is_gate)
</UL>
<P><STRONG><a name="[2e]"></a>IP_is_local_test</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, iputil.o(i.IP_is_local_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IP_is_local_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iputil.o(i.IP_is_local)
</UL>
<P><STRONG><a name="[32]"></a>IP_route_find_test</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, iputil.o(i.IP_route_find_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IP_route_find_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iputil.o(i.IP_route_find)
</UL>
<P><STRONG><a name="[22c]"></a>SOCKADDR_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(i.SOCKADDR_copy))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_bind
</UL>

<P><STRONG><a name="[23a]"></a>SOCKADDR_get_ipaddr4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.SOCKADDR_get_ipaddr4))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_set_rcvmss
</UL>

<P><STRONG><a name="[22d]"></a>SOCKADDR_get_port</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.SOCKADDR_get_port))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_bind
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Service_packet
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_is_port_used
</UL>

<P><STRONG><a name="[23b]"></a>SOCKADDR_init_no_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.SOCKADDR_init_no_port))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Service_packet
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[239]"></a>SOCKADDR_ip_and_port_are_equal</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tcp.o(i.SOCKADDR_ip_and_port_are_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOCKADDR_ip_and_port_are_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
</UL>

<P><STRONG><a name="[24a]"></a>SOCKADDR_ip_are_equal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcp.o(i.SOCKADDR_ip_are_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOCKADDR_ip_are_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Service_packet
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_is_port_used
</UL>

<P><STRONG><a name="[238]"></a>SOCKADDR_ip_is_multicast</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tcp.o(i.SOCKADDR_ip_is_multicast))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Service_packet
</UL>

<P><STRONG><a name="[237]"></a>SOCKADDR_ip_is_zero</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(i.SOCKADDR_ip_is_zero))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Service_packet
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_is_port_used
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_set_rcvmss
</UL>

<P><STRONG><a name="[22e]"></a>SOCKADDR_set_port</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.SOCKADDR_set_port))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_bind
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[232]"></a>SOCKADDR_zero_ip_and_port</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.SOCKADDR_zero_ip_and_port))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_create
</UL>

<P><STRONG><a name="[23c]"></a>tcb_set_rcvmss</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tcp.o(i.tcb_set_rcvmss))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = tcb_set_rcvmss &rArr; IP_MTU &rArr; IP_find_if &rArr; IPRADIX_insert &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_is_zero
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_ipaddr4
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_MTU
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_open
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[243]"></a>tcb_to_time_wait</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, tcp.o(i.tcb_to_time_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tcb_to_time_wait &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_log_error
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[22f]"></a>tcp_is_port_used</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcp.o(i.tcp_is_port_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_is_port_used &rArr; SOCKADDR_ip_are_equal
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_is_zero
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_ip_are_equal
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_get_port
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_bind
</UL>

<P><STRONG><a name="[242]"></a>tcp_start_keepalive_timer</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tcp.o(i.tcp_start_keepalive_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_start_keepalive_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_add
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_packet
</UL>

<P><STRONG><a name="[248]"></a>SOCKADDR_get_port</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp_send.o(i.SOCKADDR_get_port))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_reset
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_packet
</UL>

<P><STRONG><a name="[5a]"></a>TCPIP_fake_tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcpip.o(i.TCPIP_fake_tick))
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.TCPIP_task)
</UL>
<P><STRONG><a name="[35d]"></a>_bsp_flexbus_setup</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, init_hw.o(i._bsp_flexbus_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _bsp_flexbus_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[2d8]"></a>_io_inf_or_nan</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, io_fp.o(i._io_inf_or_nan))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _io_inf_or_nan
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtog
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtof
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_io_dtoe
</UL>

<P><STRONG><a name="[15]"></a>ARP_age</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, arp.o(i.ARP_age))
<BR>[Address Reference Count : 1]<UL><LI> arp.o(i.ARP_insert)
</UL>
<P><STRONG><a name="[112]"></a>ARP_delete</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, arp.o(i.ARP_delete))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_expire
</UL>

<P><STRONG><a name="[16]"></a>ARP_expire</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, arp.o(i.ARP_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ARP_expire &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_insert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arp.o(i.ARP_insert)
</UL>
<P><STRONG><a name="[11b]"></a>ARP_find</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, arp.o(i.ARP_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARP_find
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_service
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_resolve
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_request
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_is_complete
</UL>

<P><STRONG><a name="[113]"></a>ARP_gratuitous_send</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, arp.o(i.ARP_gratuitous_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ARP_gratuitous_send &rArr; RTCSPCB_alloc_send &rArr; RTCSPCB_alloc &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send_ARP_bcast
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_request
</UL>

<P><STRONG><a name="[118]"></a>ARP_insert</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, arp.o(i.ARP_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = ARP_insert &rArr; ARP_expire &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_expire
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_expire
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_service
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_resolve
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_request
</UL>

<P><STRONG><a name="[14]"></a>ARP_send</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, arp.o(i.ARP_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ARP_send &rArr; RTCSPCB_alloc_send &rArr; RTCSPCB_alloc &rArr; RTCS_part_alloc &rArr; _partition_alloc_system &rArr; _partition_alloc_internal &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_seterror
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_insert_header
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPE_send_ARP_bcast
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_send
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARP_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arp.o(i.ARP_insert)
</UL>
<P><STRONG><a name="[132]"></a>DHCPCLNT_modify_options</STRONG> (Thumb, 312 bytes, Stack size 12 bytes, dhcpclnt.o(i.DHCPCLNT_modify_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DHCPCLNT_modify_options
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_release_internal
</UL>

<P><STRONG><a name="[133]"></a>DHCPCLNT_send_one_shot</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dhcpclnt.o(i.DHCPCLNT_send_one_shot))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = DHCPCLNT_send_one_shot &rArr; BOOT_send &rArr; UDP_send_IF &rArr; IP_send_IF &rArr; IP_send_dgram &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_send
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_append_fragment
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOT_send
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_send_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_release_internal
</UL>

<P><STRONG><a name="[136]"></a>DHCP_send_internal</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, dhcpclnt.o(i.DHCP_send_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = DHCP_send_internal &rArr; UDP_send_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPCLNT_send_one_shot
</UL>

<P><STRONG><a name="[137]"></a>SOCKADDR_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dhcpclnt.o(i.SOCKADDR_init))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_send_internal
</UL>

<P><STRONG><a name="[1c]"></a>IGMP_expire</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, igmp.o(i.IGMP_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = IGMP_expire &rArr; IGMP_send_report &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_rand
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_send_report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> igmp.o(i.IGMP_init_timer)
</UL>
<P><STRONG><a name="[17a]"></a>IGMP_rcv_query</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, igmp.o(i.IGMP_rcv_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IGMP_rcv_query &rArr; RTCS_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_stop_timer
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_launch_timer
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_init_timer
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_expire
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_service
</UL>

<P><STRONG><a name="[17b]"></a>IGMP_rcv_report</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, igmp.o(i.IGMP_rcv_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IGMP_rcv_report &rArr; IGMP_stop_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_service
</UL>

<P><STRONG><a name="[1b]"></a>IGMP_service</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, igmp.o(i.IGMP_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = IGMP_service &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_Sum_PCB
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_rcv_report
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_rcv_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> igmp.o(i.IGMP_init)
</UL>
<P><STRONG><a name="[1e]"></a>IGMP_is_member_test</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, igmputil.o(i.IGMP_is_member_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IGMP_is_member_test
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IGMP_member_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> igmputil.o(i.IGMP_is_member)
</UL>
<P><STRONG><a name="[1a2]"></a>ip_option_handler</STRONG> (Thumb, 472 bytes, Stack size 64 bytes, ip.o(i.ip_option_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ip_option_handler &rArr; IP_get_ipif_addr &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_get_ipif_addr
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_option_timestamp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_service
</UL>

<P><STRONG><a name="[35e]"></a>ip_option_timestamp_add</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ip.o(i.ip_option_timestamp_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ip_option_timestamp_add &rArr; RTCS_time_get &rArr; _time_get_elapsed &rArr; _psp_ticks_to_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_option_handler
</UL>

<P><STRONG><a name="[186]"></a>ip_if_list_add</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ip_if.o(i.ip_if_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_add
</UL>

<P><STRONG><a name="[187]"></a>ip_if_list_del</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ip_if.o(i.ip_if_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_remove
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPIF_add
</UL>

<P><STRONG><a name="[41]"></a>RTCSPCB_construct</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtcspcb.o(i.RTCSPCB_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RTCSPCB_construct &rArr; _lwsem_create_hidden &rArr; _lwsem_create_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_hidden
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcspcb.o(i.RTCSPCB_init)
</UL>
<P><STRONG><a name="[40]"></a>RTCSPCB_destroy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rtcspcb.o(i.RTCSPCB_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = RTCSPCB_destroy &rArr; _lwsem_destroy &rArr; _lwsem_destroy_internal &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtcspcb.o(i.RTCSPCB_init)
</UL>
<P><STRONG><a name="[3f]"></a>RTCSPCB_free_internal</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, rtcspcb.o(i.RTCSPCB_free_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = RTCSPCB_free_internal &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_poll
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtcspcb.o(i.RTCSPCB_alloc_recv)
<LI> rtcspcb.o(i.RTCSPCB_construct)
</UL>
<P><STRONG><a name="[5e]"></a>tcb_blocking_linger_timeout_expire</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcp_clos.o(i.tcb_blocking_linger_timeout_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = tcb_blocking_linger_timeout_expire &rArr; tcb_linger_timeout_expire &rArr; tcp_process_abort &rArr; TCP_Send_reset &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_linger_timeout_expire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_clos.o(i.TCP_Process_close)
</UL>
<P><STRONG><a name="[5d]"></a>tcb_linger_timeout_expire</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp_clos.o(i.tcb_linger_timeout_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = tcb_linger_timeout_expire &rArr; tcp_process_abort &rArr; TCP_Send_reset &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCB_exists_in_system
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_blocking_linger_timeout_expire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp_clos.o(i.TCP_Process_close)
</UL>
<P><STRONG><a name="[227]"></a>tcp_process_abort</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tcp_clos.o(i.tcp_process_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = tcp_process_abort &rArr; TCP_Send_reset &rArr; TCP_Send_IP_packet &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_reset
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_release
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Close_TCB
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Process_abort
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcb_linger_timeout_expire
</UL>

<P><STRONG><a name="[253]"></a>SOCKADDR_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udp.o(i.SOCKADDR_copy))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_connect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bind
</UL>

<P><STRONG><a name="[25a]"></a>SOCKADDR_get_ipaddr4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.SOCKADDR_get_ipaddr4))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
</UL>

<P><STRONG><a name="[24f]"></a>SOCKADDR_get_port</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udp.o(i.SOCKADDR_get_port))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_connect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bind
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_close
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_internal
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_send_IF
</UL>

<P><STRONG><a name="[25b]"></a>SOCKADDR_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udp.o(i.SOCKADDR_init))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_fromaddr
</UL>

<P><STRONG><a name="[251]"></a>SOCKADDR_ip_and_port_are_equal</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, udp.o(i.SOCKADDR_ip_and_port_are_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SOCKADDR_ip_and_port_are_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_connect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bind
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
</UL>

<P><STRONG><a name="[255]"></a>SOCKADDR_ip_is_multicast</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, udp.o(i.SOCKADDR_ip_is_multicast))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_connect
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_service
</UL>

<P><STRONG><a name="[250]"></a>SOCKADDR_ip_is_zero</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, udp.o(i.SOCKADDR_ip_is_zero))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_connect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bind
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_close
</UL>

<P><STRONG><a name="[252]"></a>SOCKADDR_set_port</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, udp.o(i.SOCKADDR_set_port))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_connect
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bind
</UL>

<P><STRONG><a name="[61]"></a>UDP_receive_expire</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, udp.o(i.UDP_receive_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = UDP_receive_expire &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UCB_exists_in_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp.o(i.UDP_receive)
</UL>
<P><STRONG><a name="[257]"></a>udp_get_rx_item_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udp.o(i.udp_get_rx_item_size))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_process
</UL>

<P><STRONG><a name="[254]"></a>udp_release_pending_receive_requests</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, udp.o(i.udp_release_pending_receive_requests))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = udp_release_pending_receive_requests &rArr; RTCS_cmd_complete &rArr; _task_ready &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_cmd_complete
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPIP_Event_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_close
</UL>

<P><STRONG><a name="[256]"></a>udp_return_req2socket_from_pcb</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, udp.o(i.udp_return_req2socket_from_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = udp_return_req2socket_from_pcb &rArr; RTCSPCB_memcopy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_memcopy
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_fromaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_process
</UL>

<P><STRONG><a name="[259]"></a>udp_return_req2socket_from_rx_queue</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(i.udp_return_req2socket_from_rx_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_return_req2socket_from_rx_queue &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_receive
</UL>

<P><STRONG><a name="[376]"></a>udp_set_fromaddr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, udp.o(i.udp_set_fromaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_set_fromaddr &rArr; UDP_source
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_source
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_source
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOCKADDR_init
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_rx_dgram_header_and_data
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_return_req2socket_from_pcb
</UL>

<P><STRONG><a name="[258]"></a>udp_set_rx_dgram_header_and_data</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(i.udp_set_rx_dgram_header_and_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = udp_set_rx_dgram_header_and_data &rArr; RTCSPCB_memcopy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_memcopy
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_set_fromaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_process
</UL>

<P><STRONG><a name="[d1]"></a>phy_ksz8081_discover_addr</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, phy_ksz8081.o(i.phy_ksz8081_discover_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = phy_ksz8081_discover_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_ksz8081.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>phy_ksz8081_get_link_status</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, phy_ksz8081.o(i.phy_ksz8081_get_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = phy_ksz8081_get_link_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_ksz8081.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>phy_ksz8081_get_speed</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, phy_ksz8081.o(i.phy_ksz8081_get_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = phy_ksz8081_get_speed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_ksz8081.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>phy_ksz8081_init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, phy_ksz8081.o(i.phy_ksz8081_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = phy_ksz8081_init &rArr; _time_delay &rArr; _sched_yield &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy_ksz8081.o(.constdata)
</UL>
<P><STRONG><a name="[2a5]"></a>_esdhc_get_baudrate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, esdhc.o(i._esdhc_get_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _esdhc_get_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_get_baudrate_low
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
</UL>

<P><STRONG><a name="[2a6]"></a>_esdhc_get_baudrate_low</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, esdhc.o(i._esdhc_get_baudrate_low))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_get_baudrate
</UL>

<P><STRONG><a name="[2a7]"></a>_esdhc_get_card_type</STRONG> (Thumb, 630 bytes, Stack size 48 bytes, esdhc.o(i._esdhc_get_card_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _esdhc_get_card_type &rArr; _esdhc_send_command &rArr; _lwevent_wait_ticks &rArr; _lwevent_wait_internal &rArr; _time_delay_until &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
</UL>

<P><STRONG><a name="[2a9]"></a>_esdhc_init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, esdhc.o(i._esdhc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _esdhc_init &rArr; _esdhc_set_baudrate_low &rArr; _time_delay &rArr; _sched_yield &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_esdhc_io_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_set_baudrate_low
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_open
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
</UL>

<P><STRONG><a name="[2b2]"></a>_esdhc_is_running</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, esdhc.o(i._esdhc_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
</UL>

<P><STRONG><a name="[66]"></a>_esdhc_isr</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, esdhc.o(i._esdhc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = _esdhc_isr &rArr; _lwevent_set &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esdhc.o(i._esdhc_install)
</UL>
<P><STRONG><a name="[2a8]"></a>_esdhc_send_command</STRONG> (Thumb, 634 bytes, Stack size 64 bytes, esdhc.o(i._esdhc_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = _esdhc_send_command &rArr; _lwevent_wait_ticks &rArr; _lwevent_wait_internal &rArr; _time_delay_until &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_milliseconds
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_enable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_wait_ticks
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_get_signalled
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwevent_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_read
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_get_card_type
</UL>

<P><STRONG><a name="[2b3]"></a>_esdhc_set_baudrate</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, esdhc.o(i._esdhc_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _esdhc_set_baudrate &rArr; _esdhc_set_baudrate_low &rArr; _time_delay &rArr; _sched_yield &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_esdhc_io_init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_set_baudrate_low
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
</UL>

<P><STRONG><a name="[2ab]"></a>_esdhc_set_baudrate_low</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, esdhc.o(i._esdhc_set_baudrate_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _esdhc_set_baudrate_low &rArr; _time_delay &rArr; _sched_yield &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_set_baudrate
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_init
</UL>

<P><STRONG><a name="[2b4]"></a>_esdhc_wait_while_busy</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, esdhc.o(i._esdhc_wait_while_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _esdhc_wait_while_busy &rArr; _sched_yield &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_milliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esdhc_ioctl
</UL>

<P><STRONG><a name="[dd]"></a>hwtimer_systick_deinit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hwtimer_systick.o(i.hwtimer_systick_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = hwtimer_systick_deinit &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_default_isr
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_get_vector
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>hwtimer_systick_get_time</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hwtimer_systick.o(i.hwtimer_systick_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hwtimer_systick_get_time &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>hwtimer_systick_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hwtimer_systick.o(i.hwtimer_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = hwtimer_systick_init &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_get_vector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>hwtimer_systick_isr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hwtimer_systick.o(i.hwtimer_systick_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwtimer_systick_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(i.hwtimer_systick_init)
</UL>
<P><STRONG><a name="[de]"></a>hwtimer_systick_set_div</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hwtimer_systick.o(i.hwtimer_systick_set_div))
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>hwtimer_systick_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hwtimer_systick.o(i.hwtimer_systick_start))
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>hwtimer_systick_stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hwtimer_systick.o(i.hwtimer_systick_stop))
<BR>[Address Reference Count : 1]<UL><LI> hwtimer_systick.o(.constdata)
</UL>
<P><STRONG><a name="[2e8]"></a>_ki2c_polled_rx_tx</STRONG> (Thumb, 790 bytes, Stack size 20 bytes, i2c_pol_ki2c.o(i._ki2c_polled_rx_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ki2c_polled_rx_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_tx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_rx
</UL>

<P><STRONG><a name="[2e7]"></a>_ki2c_set_baudrate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, i2c_pol_ki2c.o(i._ki2c_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ki2c_set_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_ioctl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ki2c_polled_init
</UL>

<P><STRONG><a name="[89]"></a>_ki2c_isr</STRONG> (Thumb, 1046 bytes, Stack size 24 bytes, i2c_int_ki2c.o(i._ki2c_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = _ki2c_isr &rArr; _lwsem_post &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_int_ki2c.o(i._ki2c_int_init)
</UL>
<P><STRONG><a name="[308]"></a>_kuart_polled_peripheral_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serl_pol_kuart.o(i._kuart_polled_peripheral_disable))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
</UL>

<P><STRONG><a name="[307]"></a>_kuart_polled_peripheral_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serl_pol_kuart.o(i._kuart_polled_peripheral_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kuart_polled_init
</UL>

<P><STRONG><a name="[31]"></a>IP_route_add_indirect_sort</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, iproute.o(i.IP_route_add_indirect_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = IP_route_add_indirect_sort &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iproute.o(i.IP_route_add_indirect)
</UL>
<P><STRONG><a name="[36]"></a>IP_route_delete</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, iproute.o(i.IP_route_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IP_route_delete &rArr; RTCS_part_free &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iproute.o(i.IP_route_remove_direct)
<LI> iproute.o(i.IP_route_remove_indirect)
</UL>
<P><STRONG><a name="[35]"></a>IP_route_delete_direct_test</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, iproute.o(i.IP_route_delete_direct_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IP_route_delete_direct_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iproute.o(i.IP_route_remove_direct)
</UL>
<P><STRONG><a name="[38]"></a>IP_route_delete_indirect_all</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, iproute.o(i.IP_route_delete_indirect_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = IP_route_delete_indirect_all &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCS_part_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iproute.o(i.IP_route_remove_indirect)
</UL>
<P><STRONG><a name="[37]"></a>IP_route_delete_indirect_test</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, iproute.o(i.IP_route_delete_indirect_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IP_route_delete_indirect_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iproute.o(i.IP_route_remove_indirect)
</UL>
<P><STRONG><a name="[30]"></a>IP_route_insert</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, iproute.o(i.IP_route_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IP_route_insert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iproute.o(i.IP_route_add_indirect)
<LI> iproute.o(i.IP_route_add_direct)
</UL>
<P><STRONG><a name="[33]"></a>IP_route_local_test</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, iproute.o(i.IP_route_local_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IP_route_local_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iproute.o(i.IP_route_local)
</UL>
<P><STRONG><a name="[34]"></a>IP_route_multi_test</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, iproute.o(i.IP_route_multi_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = IP_route_multi_test &rArr; IP_send_dgram &rArr; ICMP_send_error &rArr; ICMP_send_error_internal &rArr; IP_send &rArr; IP_route &rArr;  IP_send_dgram (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCSPCB_alloc_dup
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IP_send_dgram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iproute.o(i.IP_route_multi)
</UL>
<P><STRONG><a name="[2f]"></a>IP_route_test</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, iproute.o(i.IP_route_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = IP_route_test &rArr; _mqx_get_io_component_handle &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_get_io_component_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iproute.o(i.IP_route)
</UL>
<P><STRONG><a name="[26e]"></a>adc_calibrate</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, adc_kadc.o(i.adc_calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_calibrate
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
</UL>

<P><STRONG><a name="[62]"></a>adc_complete_isr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, adc_kadc.o(i.adc_complete_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = adc_complete_isr &rArr; adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_kadc.o(i._adc_hw_init)
</UL>
<P><STRONG><a name="[270]"></a>adc_get_calibration_data</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, adc_kadc.o(i.adc_get_calibration_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_get_calibration_data
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
</UL>

<P><STRONG><a name="[271]"></a>adc_process_data</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, adc_kadc.o(i.adc_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_process_data
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_all_data
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_complete_isr
</UL>

<P><STRONG><a name="[26f]"></a>adc_set_calibration_data</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, adc_kadc.o(i.adc_set_calibration_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_set_calibration_data
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_adc_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_hw_ioctl
</UL>

<P><STRONG><a name="[63]"></a>adt_idelay_isr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, adt_kpdb.o(i.adt_idelay_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = adt_idelay_isr &rArr; adc_process_all_data &rArr; adc_process_data &rArr; _adt_process_data &rArr; _lwevent_set &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_process_all_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adt_kpdb.o(i._adt_hw_init)
</UL>
<P><STRONG><a name="[27a]"></a>adt_period_prescaler</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, adt_kpdb.o(i.adt_period_prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adt_period_prescaler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_ioctl
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adt_hw_channel_init
</UL>

<P><STRONG><a name="[6]"></a>edma_channel_claim</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, edma.o(i.edma_channel_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = edma_channel_claim &rArr; _lwmem_alloc_system_zero &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_zero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>edma_channel_release</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, edma.o(i.edma_channel_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = edma_channel_release &rArr; _lwmem_free &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>edma_channel_reset</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, edma.o(i.edma_channel_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = edma_channel_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_setup
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>edma_channel_setup</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, edma.o(i.edma_channel_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = edma_channel_setup &rArr; _lwmem_alloc_system_align &rArr; _lwmem_alloc_align_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_free
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmem_alloc_system_align
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[351]"></a>edma_channel_sgaidx</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, edma.o(i.edma_channel_sgaidx))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_done_isr
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_status
</UL>

<P><STRONG><a name="[a]"></a>edma_channel_status</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, edma.o(i.edma_channel_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = edma_channel_status &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_sgaidx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>edma_deinit</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, edma.o(i.edma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = edma_deinit &rArr; edma_uninstall_isrs &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_uninstall_isrs
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_reset_module
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>edma_done_isr</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, edma.o(i.edma_done_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = edma_done_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_channel_sgaidx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(i.edma_install_isrs)
</UL>
<P><STRONG><a name="[a5]"></a>edma_err_isr</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, edma.o(i.edma_err_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = edma_err_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(i.edma_install_isrs)
</UL>
<P><STRONG><a name="[359]"></a>edma_hwtcd_push</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, edma.o(i.edma_hwtcd_push))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_transfer_submit
</UL>

<P><STRONG><a name="[4]"></a>edma_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, edma.o(i.edma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = edma_init &rArr; edma_install_isrs &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_reset_module
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_install_isrs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[354]"></a>edma_install_isrs</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, edma.o(i.edma_install_isrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = edma_install_isrs &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_edma_error_vectors
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_edma_done_vectors
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_init
</UL>

<P><STRONG><a name="[e]"></a>edma_request_disable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, edma.o(i.edma_request_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = edma_request_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>edma_request_enable</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, edma.o(i.edma_request_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = edma_request_enable &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>edma_request_source</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, edma.o(i.edma_request_source))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = edma_request_source
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[353]"></a>edma_reset_module</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, edma.o(i.edma_reset_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = edma_reset_module
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_edma_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_deinit
</UL>

<P><STRONG><a name="[358]"></a>edma_tcd_prepare</STRONG> (Thumb, 308 bytes, Stack size 20 bytes, edma.o(i.edma_tcd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = edma_tcd_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_transfer_submit
</UL>

<P><STRONG><a name="[b]"></a>edma_transfer_submit</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, edma.o(i.edma_transfer_submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = edma_transfer_submit &rArr; edma_tcd_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_tcd_prepare
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_hwtcd_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edma.o(.data)
</UL>
<P><STRONG><a name="[352]"></a>edma_uninstall_isrs</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, edma.o(i.edma_uninstall_isrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = edma_uninstall_isrs &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_default_isr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_edma_error_vectors
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bsp_get_edma_done_vectors
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edma_deinit
</UL>

<P><STRONG><a name="[1c1]"></a>MACNET_mii_enabled</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, macnet_mii.o(i.MACNET_mii_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_read_write_mii
</UL>

<P><STRONG><a name="[1c0]"></a>MACNET_read_write_mii</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, macnet_mii.o(i.MACNET_read_write_mii))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = MACNET_read_write_mii &rArr; _time_delay &rArr; _sched_yield &rArr; _task_ready_internal &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_mii_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_write_mii
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_read_mii
</UL>

<P><STRONG><a name="[1ab]"></a>MACNET_discard_current_rx</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, macnet_receive.o(i.MACNET_discard_current_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MACNET_discard_current_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Enqueue_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_process_rx_bds
</UL>

<P><STRONG><a name="[1a4]"></a>MACNET_process_rx_bds</STRONG> (Thumb, 782 bytes, Stack size 64 bytes, macnet_receive.o(i.MACNET_process_rx_bds))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MACNET_process_rx_bds &rArr; ENET_find_receiver
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Enqueue_Buffer
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Dequeue_Buffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_swap4byte
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_swap2byte
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_add_buffers_to_rx_ring
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_find_receiver
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_discard_current_rx
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_RX_ISR
</UL>

<P><STRONG><a name="[3c]"></a>MACNET_rx_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, macnet_receive.o(i.MACNET_rx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MACNET_rx_free &rArr; MACNET_add_buffers_to_rx_ring &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Enqueue_Buffer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_add_buffers_to_rx_ring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macnet_receive.o(i.MACNET_process_rx_bds)
</UL>
<P><STRONG><a name="[3d]"></a>MACNET_rx_free_large</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, macnet_receive.o(i.MACNET_rx_free_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MACNET_rx_free_large &rArr; MACNET_rx_free_specific &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_rx_free_specific
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macnet_receive.o(i.MACNET_process_rx_bds)
</UL>
<P><STRONG><a name="[3e]"></a>MACNET_rx_free_small</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, macnet_receive.o(i.MACNET_rx_free_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MACNET_rx_free_small &rArr; MACNET_rx_free_specific &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_rx_free_specific
</UL>
<BR>[Address Reference Count : 1]<UL><LI> macnet_receive.o(i.MACNET_process_rx_bds)
</UL>
<P><STRONG><a name="[1c2]"></a>MACNET_rx_free_specific</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, macnet_receive.o(i.MACNET_rx_free_specific))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MACNET_rx_free_specific &rArr; _int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Enqueue_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_rx_free_small
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_rx_free_large
</UL>

<P><STRONG><a name="[1a5]"></a>MACNET_process_tx_bds</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, macnet_send.o(i.MACNET_process_tx_bds))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MACNET_process_tx_bds
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_Enqueue_Buffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_swap4byte
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_swap2byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_TX_ISR
</UL>

<P><STRONG><a name="[1c3]"></a>MACNET_uninstall_isr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, macnet_util.o(i.MACNET_uninstall_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = MACNET_uninstall_isr &rArr; _int_install_isr &rArr; _lwmem_alloc_system &rArr; _lwmem_alloc_internal &rArr; _task_set_error &rArr; _klog_log &rArr; _lwlog_write &rArr; _lwlog_write_internal &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_nvic_int_disable
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_get_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MACNET_uninstall_all_isrs
</UL>

<P><STRONG><a name="[386]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[379]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
